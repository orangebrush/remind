//
//  FrequencyIntervalSeletorView.swift
//  Remind
//
//  Created by dong on 2018/1/9.
//  Copyright © 2018年 ganyi. All rights reserved.
//

import UIKit
let defaultLineHeight: CGFloat = 1 / UIScreen.main.scale
class FrequencyIntervalSeletorView: UIView {
    fileprivate var action: ((_ index: Int) -> Void)?
    
    fileprivate let cancelButton = UIButton()
    
    fileprivate let confirmButton = UIButton()
    
    
    fileprivate var buttons = [UIButton]()
    
    
    fileprivate var text: String?
    
    fileprivate let buttonHeight = 52
    
    
    
    fileprivate var seleteIndex: Int = 0
    
    fileprivate var hasNone: Bool = false
    
    init() {
        super.init(frame: CGRect.zero)
        backgroundColor = UIColor(colorHex: 0xf4f4f4, alpha: 1)
        
        
        let vSeparator = UIView()
        vSeparator.backgroundColor = UIColor(colorHex: 0xe6e6e6, alpha: 1)
        addSubview(vSeparator)
        vSeparator.snp.makeConstraints { (make) in
            make.centerX.equalToSuperview()
            make.height.equalTo(24)
            make.width.equalTo(defaultLineHeight)
            make.bottom.equalToSuperview().offset(-14)
        }
        
        

        cancelButton.titleLabel?.font = UIFont.systemFont(ofSize: 15)
        cancelButton.setTitle("取消", for: .normal)
        cancelButton.setTitleColor(UIColor.subWord, for: .normal)
        cancelButton.addTarget(self, action: #selector(dismiss), for: .touchUpInside)
        addSubview(cancelButton)
        cancelButton.snp.makeConstraints { (make) in
            make.height.equalTo(52)
            make.left.equalToSuperview()
            make.bottom.equalToSuperview()
            make.right.equalTo(vSeparator.snp.left)
        }
        

        confirmButton.setTitle("确定", for: .normal)
        confirmButton.setTitleColor(UIColor.orange, for: .normal)
        confirmButton.titleLabel?.font = UIFont(withSemiboldFontSize: 15)
        confirmButton.tag = 100
        confirmButton.addTarget(self, action: #selector(click(_:)), for: .touchUpInside)
        addSubview(confirmButton)
        
        confirmButton.snp.makeConstraints { (make) in
            make.height.equalTo(52)
            make.right.equalToSuperview()
            make.bottom.equalToSuperview()
            make.left.equalTo(vSeparator.snp.right)
        }
        
        
        let separator0 = UIView()
        separator0.backgroundColor = UIColor(colorHex: 0xe6e6e6)
        addSubview(separator0)
        separator0.snp.makeConstraints { (make) in
            make.left.right.equalToSuperview()
            make.height.equalTo(defaultLineHeight)
            make.bottom.equalToSuperview().offset(-51)
        }
        
  
        
        
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    static func show(window: UIWindow, text: String, seleteIndex: Int, titles: [String], hasNone: Bool,  _ action: @escaping (_ index: Int) -> Void) {
        let loginTypeView = FrequencyIntervalSeletorView()
        loginTypeView.action = action
        loginTypeView.text = text
        loginTypeView.hasNone = hasNone
        if seleteIndex > 1 {
             loginTypeView.seleteIndex = seleteIndex - 1
        }else {
             loginTypeView.seleteIndex = seleteIndex
        }
        loginTypeView.addActions(titles: titles)
        loginTypeView.layer.cornerRadius = 6
        loginTypeView.clipsToBounds = true
        
        let maskView = UIButton(frame: UIScreen.main.bounds)
        maskView.backgroundColor = .clear
        maskView.addTarget(loginTypeView, action: #selector(dismiss), for: .touchUpInside)
        maskView.addSubview(loginTypeView)
        loginTypeView.snp.makeConstraints { (make) in
            make.left.equalTo(10)
            make.right.equalToSuperview().offset(-10)
            make.top.equalToSuperview().offset(UIScreen.main.bounds.height)
        }
        
        window.addSubview(maskView)
        maskView.layoutIfNeeded()
        loginTypeView.snp.updateConstraints { (make) in
            make.top.equalToSuperview().offset(UIScreen.main.bounds.height - loginTypeView.frame.height - 10 - (isIphoneX ? 34 : 0))
            
        }
        UIView.animate(withDuration: 0.3) {
            maskView.layoutIfNeeded()
            maskView.backgroundColor = UIColor(white: 0, alpha: 0.4)
        }
    }
    
    fileprivate func addActions(titles: [String]) {
        titles.enumerated().forEach { (index, title) in
            let button = UIButton()
            button.backgroundColor = .white
            button.titleLabel?.font = UIFont.systemFont(ofSize: 15)
            button.setTitle(title, for: .normal)
            button.setTitleColor(UIColor.word, for: .normal)
            button.clipsToBounds = true
            button.addTarget(self, action: #selector(buttonClick(_:)), for: .touchUpInside)
            button.tag = index
            button.contentHorizontalAlignment = .left
            button.titleEdgeInsets = UIEdgeInsetsMake(0, 15, 0, 0)
            addSubview(button)
            button.snp.makeConstraints { (make) in
                
                make.leading.trailing.equalToSuperview()
                if index == 0 {
                    if self.hasNone {
                        make.top.equalToSuperview().offset(56)
                        make.height.equalTo(48)
                    }else {
                        make.top.equalToSuperview().offset(56)
                        make.height.equalTo(0)
                    }
                    
                } else {
                    make.height.equalTo(48)
                    let preView = subviews.dropLast().last!
                    make.top.equalTo(preView.snp.bottom)
                }
                
                if index == (titles.count - 1) {
                    make.bottom.equalTo(cancelButton.snp.top)
                }
            }
            buttons.append(button)
            
            let separator0 = UIView()
            separator0.backgroundColor = UIColor(colorHex: 0xe6e6e6)
            button.addSubview(separator0)
            separator0.snp.makeConstraints { (make) in
                make.top.equalToSuperview()
                make.height.equalTo(defaultLineHeight)
                make.leading.trailing.equalToSuperview()
            }
            
            let imageView = UIImageView()
            imageView.image = UIImage.init(named: "list_checked")
            imageView.tag = 200
            button.addSubview(imageView)
            imageView.snp.makeConstraints({ (make) in
                make.width.height.equalTo(20)
                make.centerY.equalToSuperview()
                make.right.equalToSuperview().offset(-15)
            })
            if button.tag == self.seleteIndex {
                imageView.isHidden = false
            }else {
                imageView.isHidden = true
            }
        }
        
        let textLabel = UILabel()
        textLabel.backgroundColor = UIColor(colorHex: 0xf4f4f4, alpha: 1)
        textLabel.textColor = UIColor.word
        textLabel.font = UIFont.systemFont(ofSize: 18)
        textLabel.textAlignment = .center
        textLabel.text = self.text
        addSubview(textLabel)
        textLabel.snp.makeConstraints { (make) in
            make.top.left.right.equalToSuperview()
            make.height.equalTo(56)
        }
    }
    
     @objc fileprivate func buttonClick(_ button: UIButton) {
        self.seleteIndex = button.tag
        
        buttons.enumerated().forEach { (index, button) in
            let imageView = button.viewWithTag(200)
            if index == self.seleteIndex {
                imageView?.isHidden = false
            }else {
                imageView?.isHidden = true
            }
        }
    }
    
    @objc fileprivate func click(_ button: UIButton) {
        if self.seleteIndex > 1 {
            seleteIndex = seleteIndex + 1
        }
        action?(self.seleteIndex)
        dismiss()
    }
    
    @objc fileprivate func dismiss() {
        snp.updateConstraints { (make) in
            make.top.equalToSuperview().offset(UIScreen.main.bounds.height)
        }
        UIView.animate(withDuration: 0.3, animations: {
            self.superview?.layoutIfNeeded()
            self.superview?.backgroundColor = .clear
        }) { (_) in
            self.superview?.removeFromSuperview()
            self.removeFromSuperview()
        }
    }
}
