//
//  MeDefaultTableViewCell.swift
//  Remind
//
//  Created by dong on 2018/1/11.
//  Copyright © 2018年 ganyi. All rights reserved.
//

import UIKit

class  MeDefaultTableViewCell: UITableViewCell {
    var containerView = UIView()
    
    var topRadiusView = UIView()
    
    var bottomRadiusView = UIView()
    
    var leftImageView: UIImageView = UIImageView()
    var nameLabel: UILabel = UILabel()
    var rightLabel: UILabel = UILabel()
    var rightImageView : UIImageView = UIImageView()
    var lineView: UIView = UIView()
    
    let cellSpace: CGFloat = 15
    
    var closure: ((String)->())?
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        self.selectionStyle = .none
        self.backgroundColor = UIColor.clear
        self.contentView.backgroundColor = UIColor.clear
        
        let radiusBounds = CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH - 2 * .edge10, height: 48 + kLineHeight)
        contentView.addSubview(topRadiusView)
        topRadiusView.snp.makeConstraints { (make) in
            make.left.equalTo(10)
            make.right.equalTo(-10)
            make.top.bottom.equalToSuperview()
        }
        let corners: UIRectCorner = [UIRectCorner.topLeft, UIRectCorner.topRight]
        let path = UIBezierPath(roundedRect: radiusBounds, byRoundingCorners: corners, cornerRadii: CGSize(width: 6, height: 6))
        let maskLayer = CAShapeLayer()
        maskLayer.path = path.cgPath
        maskLayer.frame = radiusBounds
        topRadiusView.layer.mask = maskLayer
        
        
        contentView.addSubview(bottomRadiusView)
        bottomRadiusView.snp.makeConstraints { (make) in
            make.edges.equalTo(topRadiusView)
        }
        let corners1: UIRectCorner = [UIRectCorner.bottomLeft, UIRectCorner.bottomRight]
        let path1 = UIBezierPath(roundedRect: radiusBounds, byRoundingCorners: corners1, cornerRadii: CGSize(width: 6, height: 6))
        let maskLayer1 = CAShapeLayer()
        maskLayer1.path = path1.cgPath
        maskLayer1.frame = radiusBounds
        bottomRadiusView.layer.mask = maskLayer1
        
        
        
        contentView.addSubview(containerView)
        
        containerView.snp.makeConstraints { (make) in
            make.edges.equalTo(topRadiusView)
        }
        
        
        containerView.addSubview(leftImageView)
        leftImageView.snp.makeConstraints { (make) in
            make.left.equalTo(cellSpace)
            make.centerY.equalToSuperview()
            make.width.height.equalTo(22)
        }
        
        containerView.addSubview(nameLabel)
        nameLabel.font = UIFont.systemFont(ofSize: 14)
        nameLabel.textColor = UIColor.word
        nameLabel.snp.makeConstraints { (make) in
            make.top.bottom.equalToSuperview()
            make.left.equalTo(leftImageView.snp.right).offset(cellSpace)
            make.width.equalTo(100)
        }
        
        
        containerView.addSubview(rightImageView)
        rightImageView.image = UIImage.init(named: "list_arrow_right")
        rightImageView.snp.makeConstraints { (make) in
            make.right.equalToSuperview().offset(-cellSpace)
            make.width.height.equalTo(16)
            make.centerY.equalToSuperview()
        }
        
        containerView.addSubview(rightLabel)
        rightLabel.font = UIFont.systemFont(ofSize: 14)
        rightLabel.textAlignment = .right
        rightLabel.textColor = UIColor.subSubWord
        rightLabel.snp.makeConstraints { (make) in
            make.top.bottom.equalToSuperview()
            make.left.equalTo(nameLabel.snp.right).offset(5)
            make.right.equalTo(rightImageView.snp.left)
        }
        
        
        containerView.addSubview(lineView)
        lineView.backgroundColor = UIColor.separator
        lineView.snp.makeConstraints { (make) in
            make.bottom.equalToSuperview()
            make.right.equalToSuperview()
            make.height.equalTo(kLineHeight)
            make.left.equalTo(cellSpace)
        }
        
    }
    
    func setItem(_ item: MineItem) {
        if item.iconName != "" {
            leftImageView.image = UIImage.init(named: item.iconName)
            leftImageView.snp.updateConstraints({ (make) in
                make.left.equalTo(15)
                make.width.height.equalTo(22)
            })
        }else {
            leftImageView.snp.updateConstraints({ (make) in
                make.left.equalTo(0)
                make.width.height.equalTo(0)
            })
        }
        nameLabel.text = item.name
        rightLabel.text = item.info
        if item.radiusType == .top {
            containerView.backgroundColor = UIColor.white.withAlphaComponent(0.9)
            bottomRadiusView.backgroundColor = .clear
            topRadiusView.backgroundColor = .white
        }else if item.radiusType == .bottom {
            containerView.backgroundColor = .clear
            topRadiusView.backgroundColor = .clear
            bottomRadiusView.backgroundColor = .white
        }else if item.radiusType == .none  {
            bottomRadiusView.backgroundColor = .clear
            topRadiusView.backgroundColor = .clear
            containerView.backgroundColor = .white
            containerView.layer.cornerRadius = 0
            containerView.clipsToBounds = true
        }else if item.radiusType == .all  {
            bottomRadiusView.backgroundColor = .clear
            topRadiusView.backgroundColor = .clear
            containerView.backgroundColor = .white
            containerView.layer.cornerRadius = 6
            containerView.clipsToBounds = true
        }
        if item.isShowsSeparatorLine {
            lineView.isHidden = false
        }else {
            lineView.isHidden = true
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
    }
    
    override func draw(_ rect: CGRect) {
        super.draw(rect)
        
    }
}
