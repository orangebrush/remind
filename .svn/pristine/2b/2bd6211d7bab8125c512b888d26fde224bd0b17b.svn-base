//
//  LunarHandler.swift
//  Remind
//
//  Created by gg on 27/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
let lunarYearList = ["甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉",
                     "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛己", "壬午", "癸未",
                     "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳",
                     "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯",
                     "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑",
                     "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥"]
let lunarMonthList = ["正月", "二月", "三月", "四月", "五月", "六月", "七月", "八月",
                      "九月", "十月", "冬月", "腊月"]
let lunarDayList = ["初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十",
                    "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十",
                    "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十"]
//开始于1900.1.31   //2017 0x0a5b0
let lunarDateDataList: [UInt32] = [0x04bd8,0x04ae0,0x0a570,0x054d5,0x0d260,0x0d950,0x16554,0x056a0,0x09ad0,0x055d2,
                                   0x04ae0,0x0a5b6,0x0a4d0,0x0d250,0x1d255,0x0b540,0x0d6a0,0x0ada2,0x095b0,0x14977,
                                   0x04970,0x0a4b0,0x0b4b5,0x06a50,0x06d40,0x1ab54,0x02b60,0x09570,0x052f2,0x04970,
                                   0x06566,0x0d4a0,0x0ea50,0x06e95,0x05ad0,0x02b60,0x186e3,0x092e0,0x1c8d7,0x0c950,
                                   0x0d4a0,0x1d8a6,0x0b550,0x056a0,0x1a5b4,0x025d0,0x092d0,0x0d2b2,0x0a950,0x0b557,
                                   0x06ca0,0x0b550,0x15355,0x04da0,0x0a5d0,0x14573,0x052d0,0x0a9a8,0x0e950,0x06aa0,
                                   0x0aea6,0x0ab50,0x04b60,0x0aae4,0x0a570,0x05260,0x0f263,0x0d950,0x05b57,0x056a0,
                                   0x096d0,0x04dd5,0x04ad0,0x0a4d0,0x0d4d4,0x0d250,0x0d558,0x0b540,0x0b5a0,0x195a6,
                                   0x095b0,0x049b0,0x0a974,0x0a4b0,0x0b27a,0x06a50,0x06d40,0x0af46,0x0ab60,0x09570,
                                   0x04af5,0x04970,0x064b0,0x074a3,0x0ea50,0x06b58,0x055c0,0x0ab60,0x096d5,0x092e0,
                                   0x0c960,0x0d954,0x0d4a0,0x0da50,0x07552,0x056a0,0x0abb7,0x025d0,0x092d0,0x0cab5,
                                   0x0a950,0x0b4a0,0x0baa4,0x0ad50,0x055d9,0x04ba0,0x0a5b0,0x15176,0x052b0,0x0a930,
                                   0x07954,0x06aa0,0x0ad50,0x05b52,0x04b60,0x0a6e6,0x0a4e0,0x0d260,0x0ea65,0x0d530,
                                   0x05aa0,0x076a3,0x096d0,0x04bd7,0x04ad0,0x0a4d0,0x1d0b6,0x0d250,0x0d520,0x0dd45,
                                   0x0b5a0,0x056d0,0x055b2,0x049b0,0x0a577,0x0a4b0,0x0aa50,0x1b255,0x06d20,0x0ada0]

///初始化日历
let calendar = Calendar.current
typealias LunarDate = (lunarYear: Int, lunarMonth: Int, lunarDay: Int64, isLeapYear: Bool, isLeapMonth: Bool, leapMonth: Int)


//MARK:- 转换农历日期为公历日期
func transformLunarToGregorian(byLunarDate lunarDate: LunarDate) -> Date{
    let yearIndex = lunarDate.lunarYear - 1900
    //获取间隔天
    var intervalDay: Int64 = 0
    for i in 0..<yearIndex{
        let days = getDaysFromLunchYear(lunchYear: i)
        intervalDay += days
    }
    
    //判断最后一年是否为闰年
    let isLeapYear = lunarDate.isLeapYear       //是否为闰年
    let leapMonth = lunarDate.leapMonth
    let lunarMonth = lunarDate.lunarMonth
    
    
    //添加闰月天数
    if isLeapYear {
        if lunarMonth > leapMonth{      //添加之前的闰月天数
            intervalDay += ((lunarDateDataList[yearIndex] >> 16) & 0xf == 0 ? 29 : 30)
        }
        if lunarMonth == leapMonth{     //添加闰月前一个月天数
            intervalDay += getDaysFromLunchYear(lunarYear: yearIndex, lunarMonth: lunarMonth).1
        }
    }
    
    //添加其他月天数
    for j in 0..<12{
        if lunarMonth == j + 1{
            break
        }
        let dayTuple = getDaysFromLunchYear(lunarYear: yearIndex, lunarMonth: j + 1)
        intervalDay += dayTuple.1
    }
    
    //添加天数
    intervalDay += (lunarDate.lunarDay - 1)
    
    let calendar = Calendar.current
    var components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: Date())
    components.year = 1900
    components.month = 1
    components.day = 31
    let newDate = calendar.date(from: components) ?? Date()
    return newDate.offset(with: Int(intervalDay), withTime: true)
}

//MARK:- 转换公历日期为农历日期
func transformGregorianToLunar(byDate date: Date) -> LunarDate{
    var components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: date)
    components.year = 1900
    components.month = 1
    components.day = 31
    components.hour = 0
    components.minute = 0
    components.second = 0
    
    let startDate = calendar.date(from: components) ?? Date()
    
    let intervals = date.timeIntervalSince(startDate)
    let intervalDays = Int64(intervals) / (24 * 60 * 60)
    
    var lYear = 0
    var lMonth = 0
    var lDay = intervalDays
    //获得年
    while lDay >= getDaysFromLunchYear(lunchYear: lYear) {
        lDay -= getDaysFromLunchYear(lunchYear: lYear)
        lYear += 1
    }
    //获得月
    let leafMonth = lunarDateDataList[lYear] & 0xf
    let hasLeaf = leafMonth > 0
    var hasLeafMonth = false            //是否需要减闰月
    var isLeafMonth = false             //当前月是否为闰月
    let months = hasLeaf ? 13 : 12
    for month in 1...months{
        let daysTuple = getDaysFromLunchYear(lunarYear: lYear, lunarMonth: month)
        //标记一次
        if !hasLeafMonth{
            hasLeafMonth = daysTuple.0
        }
        if lDay < daysTuple.1{
            if daysTuple.0 || hasLeafMonth{
                lMonth = month - 1
            }else{
                lMonth = month
            }
            isLeafMonth = daysTuple.0
            break
        }
        
        lDay -= Int64(daysTuple.1)
    }
    return (lYear + 1900, lMonth, lDay + 1, hasLeaf, isLeafMonth, Int(leafMonth))
}

//MARK:- 获取农历当年天数d
func getDaysFromLunchYear(lunchYear: Int) -> Int64{
    var days = 0
    let data = lunarDateDataList[lunchYear]
    let hasLeaf = data & 0xf > 0
    if hasLeaf{ //判断大小月
        days += data & 0xf0000 > 0 ? 30 : 29
    }
    for i in 4..<16{
        days += data & (0x1 << i) > 0 ? 30 : 29
    }
    return Int64(days)
}

//MARK:- 获取农历当月天数(是否为闰月)
func getDaysFromLunchYear(lunarYear: Int, lunarMonth: Int) -> (Bool, Int64){
    let data = lunarDateDataList[lunarYear]
    let leafMonth = data & 0xf
    let hasLeaf = lunarDateDataList[lunarYear] & 0xf > 0
    if hasLeaf{
        let leafDays: Int64 = data & 0xf0000 > 0 ? 30 : 29
        if lunarMonth <= leafMonth{
            let days: Int64 = data & (0x1 << (4 + (12 - lunarMonth))) > 0 ? 30 : 29
            return (false, days)
        }else if lunarMonth == leafMonth + 1{       //闰月
            return (true, leafDays)
        }else{
            let days: Int64 = data & (0x1 << (4 + (12 - lunarMonth + 1))) > 0 ? 30 : 29
            return (false, days)
        }
    }
    
    let days: Int64 = data & (0x1 << (4 + (12 - lunarMonth))) > 0 ? 30 : 29
    return (false, days)
}
