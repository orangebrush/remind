//
//  remainSetingTableViewCell.swift
//  Remind
//
//  Created by zxd on 2017/12/22.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit
protocol  remainSetingTableViewCellDelegate:class {
    func switchValueChange(_ indexPath:IndexPath,_ open:Bool)
}
class remainSetingTableViewCell: UITableViewCell {
    weak var delegate : remainSetingTableViewCellDelegate?
    var smallNameArr = ["提醒","提醒时间","提醒次数","预提醒","提示音"]
    var nameArr1 = ["微信","电子邮箱"]
    var cellIndexPath : IndexPath?
    fileprivate lazy var leftLabel : UILabel = {
        let label = UILabel.init()
        label.font = UIFont.normal
        label.textColor = UIColor.word
        return label
    }()
    fileprivate lazy var leftImageView : UIImageView = {
        let img = UIImageView.init()
        return img
    }()
    fileprivate lazy var rightLabel : UILabel = {
        let label = UILabel.init()
        label.font = UIFont.init(withNormalFontSize: 14)
        label.textAlignment = .right
        label.textColor = UIColor.subWord
        return label
    }()
    fileprivate lazy var swith : CustomSwitch = {
        let swithch = CustomSwitch.init()
        swithch.onTintColor = UIColor.confirm
        swithch.borderColor = UIColor.clear
        swithch.inactiveColor = UIColor.grayBtn
        return swithch
    }()
    fileprivate lazy var rightImageView : UIImageView = {
        let img = UIImageView.init()
        return img
    }()
    fileprivate lazy var backView : UIView = {
        let view = UIView.init()
        view.backgroundColor = UIColor.white
        return view
    }()
    fileprivate lazy var detailLabel : UILabel = {
       let label = UILabel.init()
        label.font = UIFont.init(withNormalFontSize: 12)
        label.textColor = UIColor.subSubWord
        return label
    }()
    fileprivate lazy var cutLabel : UILabel = {
       let label = UILabel.init()
        label.backgroundColor = UIColor.separator
        return label
    }()
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        self.selectionStyle = .none
        self.backgroundColor = UIColor.clear
        backView.frame = CGRect.init(x: 10, y: 0, width: keyDeviceWidth-20, height: 50)
        self.addSubview(backView)
        backView.addSubview(leftLabel)
        backView.addSubview(leftImageView)
        backView.addSubview(rightLabel)
        backView.addSubview(rightImageView)
        backView.addSubview(cutLabel)
        backView.addSubview(detailLabel)
        cutLabel.snp.makeConstraints { (make) in
            make.left.equalTo(15)
            make.right.bottom.equalTo(0)
            make.height.equalTo(kLineHeight)
        }
        swith.addTarget(self, action: #selector(remainSetingTableViewCell.swithValueChange(_:)), for: .valueChanged)
        backView.addSubview(swith)
    }

    func configView(_ indexPath:IndexPath,_ fileSet:FestivalSettingFieldModel,_ clip:Bool,_ eventDate:Date,_ eventCount:Int,_ eventInterval:Int,_ eventSound:String,_ eventBeginningModel:BeginningModel){
        
        self.leftLabel.snp.removeConstraints()
        self.leftImageView.snp.removeConstraints()
        self.rightLabel.snp.removeConstraints()
        self.rightImageView.snp.removeConstraints()
        self.cellIndexPath = indexPath
        if indexPath.section == 3{
             backView.frame.size.height = 60
        }else{
            backView.frame.size.height = 50
        }
        backView.resetNomalView()
        if indexPath.row == 0{
            backView.drawTopRectView()
        }
        if clip{
            backView.drawRectView()
        }
        var labeleft : CGFloat = 15
        leftLabel.textColor = UIColor.word
//        if eventCount>1{
//            if indexPath.section == 2 && indexPath.row == 3{
//                labeleft = 42
//                leftLabel.textColor  = UIColor.subSubWord
//            }
//        }
        detailLabel.snp.makeConstraints { (make) in
            make.left.equalTo(leftLabel.snp.left)
            make.height.equalTo(14)
            make.top.equalTo(leftLabel.snp.bottom)
        }
        if indexPath.section == 3{
            labeleft = 55
            leftLabel.snp.makeConstraints { (make) in
                make.left.equalTo(labeleft)
                make.top.equalTo(13)
                make.height.equalTo(20)
                make.right.equalTo(swith.snp.left)
            }
           
            detailLabel.isHidden = false
            if indexPath.row == 0{
                detailLabel.text = fileSet.isBindingWeixin ? fileSet.wxNickName : "未绑定"
            }else{
                detailLabel.text = fileSet.isBindingEmail ? fileSet.email : "未绑定"
            }
        }else{
            leftLabel.snp.makeConstraints { (make) in
                make.left.equalTo(labeleft)
                make.bottom.top.equalTo(0)
                make.width.equalTo(150)
            }
            detailLabel.isHidden = true
        }
 
        leftLabel.text = indexPath.section == 2 ? smallNameArr[indexPath.row] : nameArr1[indexPath.row]
        
        
        leftImageView.snp.makeConstraints { (make) in
            make.width.height.equalTo(28)
            make.centerY.equalToSuperview()
            make.left.equalTo(15)
        }
        if indexPath.section == 3{
            leftImageView.isHidden = false
            leftImageView.image = indexPath.row == 0 ? #imageLiteral(resourceName: "remind_wechat_icon") : #imageLiteral(resourceName: "remind_mail_icon")
        }else{
            leftImageView.isHidden = true
        }
        
        swith.snp.makeConstraints { (make) in
            make.right.equalTo(-15)
            make.centerY.equalToSuperview()
            make.width.equalTo(32)
            make.height.equalTo(20)
        }
        rightImageView.snp.makeConstraints { (make) in
            make.right.equalTo(-15)
            make.height.equalTo(16)
            make.width.equalTo(16)
            make.centerY.equalToSuperview()
        }
        rightImageView.image = #imageLiteral(resourceName: "list_arrow_right")
    
        if indexPath.section == 3 || indexPath.row == 0{
            swith.isHidden = false
            if indexPath.section == 3{
                if indexPath.row == 0{
                    swith.on = fileSet.byWeixin
                }else{
                    swith.on = fileSet.byEmail
                }
            }else{
                swith.on = fileSet.isNotif
            }
        
            rightImageView.isHidden = true
        }else{
            swith.isHidden = true
            rightImageView.isHidden = false
        }
        
        rightLabel.snp.makeConstraints { (make) in
            make.top.bottom.equalTo(0)
            make.right.equalTo(rightImageView.snp.left)
            make.left.equalTo(leftLabel.snp.right).offset(5)
        }
        if indexPath.section == 3 || indexPath.row == 0{
            rightLabel.isHidden = true
        }else{
            rightLabel.isHidden = false
            
                switch indexPath.row{
                    
                case 1:
                    rightLabel.text = "\(eventDate.formatString(with: "H:mm"))"
                    break
                case 2:
                    rightLabel.text = eventCount == 1 ? "\(eventCount)次" : "\(eventCount)次 间隔\(eventInterval)分钟"
                    break
                
                case 3:
                    var value = eventBeginningModel.list.isEmpty ? "无预提醒" : ""
                    let sortedEventBeginningList = eventBeginningModel.list.sorted(by: { (arg0, arg1) -> Bool in
                        
                        let (cycle0, value0) = arg0
                        let (cycle1, value1) = arg1
                        if cycle0.rawValue < cycle1.rawValue{
                            return true
                        }else if cycle0.rawValue > cycle1.rawValue{
                            return false
                        }else{
                            if value0 < value1{
                                return true
                            }
                        }
                        return false
                    })
                    for (index, tuple) in sortedEventBeginningList.enumerated(){
                        if index != 0{
                            value += ","
                        }
                        value += "\(tuple.1)"
                        
                        let prefixValue: String
                        switch tuple.0{
                        case .minute:
                            prefixValue = "分钟"
                        case .hour:
                            prefixValue = "小时"
                        case .day:
                            prefixValue = "天"
                        case .week:
                            prefixValue = "周"
                        case .month:
                            prefixValue = "月"
                        case .year:
                            prefixValue = "年"
                        default:
                            prefixValue = ""
                        }
                        value += prefixValue
                    }
                    
                    rightLabel.text = value
                    break
                case 4:
                    rightLabel.text = eventSound
                    break
                default :
                    break
                }
            
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    @objc func swithValueChange(_ swith:CustomSwitch){
        if self.cellIndexPath?.section == 3{
           swith.setOn(!swith.on, animated: true)
        }
        
        delegate?.switchValueChange(self.cellIndexPath!, swith.on)
     }
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }

}
