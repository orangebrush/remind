//
//  EventTimeVC.swift
//  Remind
//
//  Created by gg on 14/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
class EventTimeVC: BasedViewController {
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var confirmBarButtonItem: UIBarButtonItem!
    
    var times: Times?
    
    var newTimes = Times()
    
    var isLocked = false
    var selector: GANSelector?
    
    ///是否为重点报时
    var isWholePoint = false
    
    //MARK:- init---------------------------------------------------------------------
    override func viewDidLoad() {
        super.viewDidLoad()
        
        config()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        createContents()
    }
    
    private func config(){
        automaticallyAdjustsScrollViewInsets = false
        collectionView.allowsMultipleSelection = true
        
        confirmBarButtonItem.tintColor = .confirm
        
        view.backgroundColor = UIColor(colorHex: 0xeeeeee)
    }
    
    private func createContents(){
        
        collectionView.reloadData()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        //更新一选择
        updateView()
    }
    
    func updateView(){
        
        //提取times中的自定义字段
        guard let t = times else {
            return
        }
        
        //数据完成载入之后,设置默认勾选
        for tuple in t.list{
            let hour = tuple.hour
            let minute = tuple.minute
            var section: Int
            var row: Int
            if isWholePoint{
                section = hour / 12
                row = hour % 12
            }else{
                section = hour / 12
                row = hour * 2 % 12 + (minute == 30 ? 1 : 0)
            }
            let indexPath = IndexPath(row: row, section: section)
            collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .bottom)
            let cell = collectionView.cellForItem(at: indexPath)
            cell?.isSelected = true
        }
        
        //所有自定义时间全部勾选
        if !isWholePoint{
            for i in 0..<newTimes.list.count{
                let row = i
                let indexPath = IndexPath(row: row, section: 2)
                collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .bottom)
            }
        }
    }
    
    //MARK:- 保存时间选择
    @IBAction func save(_ sender: UIBarButtonItem){
        if let viewControllers = navigationController?.viewControllers{
            if let parentVC = viewControllers[viewControllers.count - 2] as? EventEditorVC{
                let tempTimes = times ?? Times()
                
                var dTimes = [TimesTuple]()
                for tuple in tempTimes.list{
                    let tList = dTimes.filter{$0.hour == tuple.hour && $0.minute == tuple.minute}
                    if tList.isEmpty{
                        dTimes.append(tuple)
                    }
                }
                
                dTimes += newTimes.list
                tempTimes.list = dTimes
                parentVC.eventClientTimes = tempTimes
                parentVC.isPoping = true
            }
            navigationController?.popViewController(animated: true)
        }
    }
}


//MARK:- collectionView delegate
extension EventTimeVC: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return isWholePoint ? 2 : 3
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        let temp = isWholePoint ? 0 : 1
        if section == 0 || section == 1{
            return (temp + 1) * 12
        }else{
            return temp + newTimes.list.count
        }
    }
    
    //MARK:- cell
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let section = indexPath.section
        let row = indexPath.row

        let identifier: String
        if section == 2 && row == newTimes.list.count {
            identifier = "cell_add"
        }else{
            identifier = "cell"
        }
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath)
        
        if section == 2{
            
            if row == newTimes.list.count {
                let cellAdd = cell as? EventTimeAddCell
                cellAdd?.imageView.image = #imageLiteral(resourceName: "crads_menu_add")
            }else{
                let newTimesTuple = newTimes.list[row]
                let hourStr = newTimesTuple.hour < 10 ? "0\(newTimesTuple.hour)" : "\(newTimesTuple.hour)"
                let minuteStr = newTimesTuple.minute < 10 ? "0\(newTimesTuple.minute)" : "\(newTimesTuple.minute)"
                let text = hourStr + ":" + minuteStr
                
                let cell0 = cell as? EventTimeCell
                cell0?.label.text = text
            }
        }else{
            let cell0 = cell as? EventTimeCell
            cell0?.imageView.image = #imageLiteral(resourceName: "select")
            
            
            if isWholePoint{
                cell0?.label.text = "\(row + section * 12): 00"
            }else{
                let hourStr = "\(row / 2 + section * 12):"
                let minuteStr = row % 2 == 0 ? "00" : "30"
                cell0?.label.text = hourStr + minuteStr
            }
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let section = indexPath.section
        let row = indexPath.row
        return
        var rectCorner: UIRectCorner = []
        
        if section == 2{
            let itemCount = collectionView.numberOfItems(inSection: section)
            
            if row == 0{
                if row + 4 > itemCount{
                    rectCorner = [.topLeft, .bottomLeft]
                }else{
                    rectCorner = [.topLeft]
                }
            }else if row == 3{
                if row + 4 > itemCount{
                    rectCorner = [.topRight, .bottomRight]
                }else{
                    rectCorner = [.topRight]
                }
            }else if row == itemCount - 1{          //最后一个
                if row % 4 == 0{
                    rectCorner = [.bottomLeft, .bottomRight]
                }else{
                    rectCorner = [.bottomRight]
                }
            }else if row % 4 == 0 && row / 4 == itemCount / 4{                  //右下
                rectCorner = [.bottomRight]
            }else if row % 4 == 1 && row / 4 == itemCount / 4{                  //左下
                rectCorner = [.bottomLeft]
            }
        }else{
            if row == 0{
                rectCorner = [.topLeft]
            }else if row == 3{
                rectCorner = [.topRight]
            }else {
                if isWholePoint{
                    if row == 12 - 4{
                        rectCorner = [.bottomLeft]
                    }else if row == 12 - 1{
                        rectCorner = [.bottomRight]
                    }
                }else{
                    if row == 12 * 2 - 4 {
                        rectCorner = [.bottomLeft]
                    }else if row == 12 * 2 - 1 {
                        rectCorner = [.bottomRight]
                    }
                }
            }
        }
        
        if rectCorner != []{
            cell.customCollectionDraw(withRectCorner: rectCorner)
        }    
    }
    
    func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool {
        return false
    }
    
    //flow layout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = (view_size.width - 1 * 3 - .edge10 * 2) / 4
        let height: CGFloat = 55
        return CGSize(width: width, height: height)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        if isWholePoint{
            if section == 1{
                return UIEdgeInsets(top: .edge10, left: .edge10, bottom: 60, right: .edge10)
            }
        }else{
            if section == 2{
                return UIEdgeInsets(top: .edge10, left: .edge10, bottom: 60, right: .edge10)
            }
        }
        return UIEdgeInsets(top: .edge10, left: .edge10, bottom: 0, right: .edge10)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 1 //1//4
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 1 //3.9
    }

    
    //delegate
    func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let section = indexPath.section
        if section == 2{
            collectionView.deselectItem(at: indexPath, animated: true)
            
            //添加自定义时间
            edit(withSelectorType: .time(withHasZero: true))
        }else{
            saveIndexPathsToTimesAndNewTimes()
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        let section = indexPath.section
        let row = indexPath.row
        
        if section == 0 || section == 1{
            saveIndexPathsToTimesAndNewTimes()
        }else{
            newTimes.list.remove(at: row)
            collectionView.deleteItems(at: [indexPath])
        }
    }
    
    
    //MARK:- 存储所有时间到times与newtime中
    func saveIndexPathsToTimesAndNewTimes(){
        //保存
        let indexPaths = collectionView.indexPathsForSelectedItems ?? []
        if isWholePoint{            //整点
            let tupleList = indexPaths.map{($0.row + $0.section * 12, 0)}
            times?.list = tupleList
        }else{                      //其他
            times?.list.removeAll()
            
            for ip in indexPaths{
                if ip.section < 2{
                    let tuple = (ip.row / 2 + ip.section * 12, (ip.row % 2) == 0 ? 0 : 30)
                    self.times?.list.append(tuple)
                    
                }
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool {
        return true
    }
}

