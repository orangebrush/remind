//
//  FrequencySeletorView.swift
//  Remind
//
//  Created by gg on 14/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation

//请求数据
enum FrequencySelectorType{
    case cycle(hasNone: Bool)
    case interval((FrequencyCycle, [Int]))            //范围
    case baseOnWeek
    case date
}
//返回数据
enum FrequencySelectorValueType {
    case cycle(FrequencyCycle)
    case interval(Int)
    case baseOnWeek(Bool)
    case date(Date)
}

let frequencyCycleList = ["单次事件", "按时间重复", "按天重复", "按星期重复", "按月重复", "按年重复"]

//MARK:- 输入器
class FrequencySelector: UIView {
    
    private var intervalList = [Int]()
    fileprivate var frequencySelectorType: FrequencySelectorType?
    private let buttonHeight: CGFloat = 56
    private let headerHeight: CGFloat = 56
    
    private var datePickerView: UIDatePicker?
    private var pickerView: UIPickerView?
    private var hasNone = false
    
    private lazy var pickerViewFrame: CGRect! = {
        return CGRect(x: 0, y: headerHeight, width: frame.width, height: frame.height - headerHeight - buttonHeight)
    }()
    
    //设置默认值
    var defaultValue: Any?
    
    //回调
    var closure: ((_ compeleted: Bool, _ value: FrequencySelectorValueType?)->())?
    
    private lazy var componentWidth: CGFloat! = {
        return self.frame.width / 3
    }()
    private let componentHeight: CGFloat = 55
    
    
    //模糊视图
    private lazy var blurView = { () -> UIVisualEffectView in
        let blur = UIBlurEffect(style: UIBlurEffectStyle.extraLight)
        let effectView: UIVisualEffectView = UIVisualEffectView(effect: blur)
        effectView.tag = 111
        effectView.alpha = 1
        effectView.frame = CGRect(x: 0, y: 0, width: self.bounds.width, height: self.bounds.height)
        effectView.alpha = 0.9
        return effectView
    }()
    
    
    //MARK:- init--------------------------------------------------------------------
    init(withFrequencySelectorType frequencySelectorType: FrequencySelectorType, withDefaultValue defaultValue: Any?) {
        let width = view_size.width - .edge10 * 2
        let height: CGFloat = 327

        
        self.frequencySelectorType = frequencySelectorType
        self.defaultValue = defaultValue
        
        let iphoneXHeight: CGFloat = isIphoneX ? 34 : 0
        
        let frame = CGRect(x: .edge10, y: view_size.height - height - .edge10 - iphoneXHeight, width: width, height: height)
        super.init(frame: frame)
        
        config()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
        
        let fromValue = view_size.height + frame.height / 2
        let value1 = view_size.height - frame.height / 2 - CGFloat.edge10  - (isIphoneX ? 34 : 0) - .edge8
        let toValue = view_size.height - frame.height / 2 - CGFloat.edge10  - (isIphoneX ? 34 : 0)
        
        //添加出场动画
        let group = CAAnimationGroup()
        group.duration = 0.5
        group.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
        group.fillMode = kCAFillModeBoth
        group.isRemovedOnCompletion = true
        
        let moveAnim = CAKeyframeAnimation(keyPath: "position.y")
        moveAnim.values = [fromValue, value1, toValue]
        moveAnim.keyTimes = [0, 0.7, 1]
        
        let fadeAnim = CABasicAnimation(keyPath: "opacity")
        fadeAnim.fromValue = 0.5
        fadeAnim.toValue = 1
        
        group.animations = [moveAnim, fadeAnim]
        
        layer.add(group, forKey: nil)
    }
    
    private func config(){
        
        isUserInteractionEnabled = true
        isMultipleTouchEnabled = true
        
        backgroundColor = .clear//UIColor(colorHex: 0xffffff, alpha: 0.9)
        
        //设置圆角
        layer.cornerRadius = .cornerRadius
        clipsToBounds = true
        
        addSubview(blurView)
        //设置投影
//        layer.shadowColor = UIColor.gray.cgColor
//        layer.shadowOffset = CGSize(width: 0, height: -5)
//        layer.shadowRadius = 5
//        layer.shadowOpacity = 0.8
        
        //添加背景白色
        let backViewFrame = CGRect(x: 0, y: (bounds.height - componentHeight) / 2, width: bounds.width, height: componentHeight)
        let backView = UIView(frame: backViewFrame)
        backView.backgroundColor = .white
        backView.layer.zPosition = 0
        addSubview(backView)
        
        //添加按钮
        if let selType = frequencySelectorType{

            switch selType{
            case .interval(let (freCycle, intervalList)):       //比较特殊的选择时分
                
                if freCycle == FrequencyCycle.minute{
                    let timePicker = GANTimePicker(frame: pickerViewFrame)
                    
                    timePicker.selectedDate = defaultValue as? Date ?? Date(withDateStr: "00:01", withFormatStr: "HH:mm")
                    timePicker.selectedClosure = {
                        selectedDate in
                        guard self.frequencySelectorType != nil else{
                            return
                        }
                        
                        self.defaultValue = selectedDate
                    }
                    addSubview(timePicker)
                }else{
                    self.intervalList = intervalList

                    pickerView = UIPickerView(frame: pickerViewFrame)
                    pickerView?.backgroundColor = .header
                    pickerView?.delegate = self
                    pickerView?.dataSource = self
                    addSubview(pickerView!)
                    
                    //添加分割线
                    for i in 0..<2{
                        let vy = CGFloat(i) * componentHeight + (bounds.height - componentHeight) / 2
                        let vframe = CGRect(x: 0, y: vy, width: bounds.width, height: 0.5)
                        let vsep = UIView(frame: vframe)
                        vsep.backgroundColor = UIColor(colorHex: 0xdddddd)
                        addSubview(vsep)
                    }
                }
                
            case .date:
//                datePickerView = UIDatePicker(frame: pickerViewFrame)
//                datePickerView?.backgroundColor = .header
//                if let defaultDate = defaultValue as? Date{
//                    datePickerView?.date = defaultDate
//                }
//                datePickerView?.maximumDate = Date().offset(with: 365 * 80, withTime: false)
//                datePickerView?.minimumDate = Date()
//                datePickerView?.datePickerMode = .date
//                datePickerView?.addTarget(self, action: #selector(selectedDate(sender:)), for: .valueChanged)
//                datePickerView?.setValue(UIColor.subWord, forKey: "textColor")
//                addSubview(datePickerView!)
                
                let datePickerView = GANDatePicker(frame: pickerViewFrame)
                datePickerView.selectedClosure = {
                    selectedDate in
                    guard self.frequencySelectorType != nil else{
                        return
                    }
                    
                    self.defaultValue = selectedDate
                }
                
                //设置往后两分钟
                let nowDate = Date(timeIntervalSinceNow: 60 * 10)
                
                
                if let defaultValueDate = defaultValue as? Date{
                    datePickerView.selectedDate = defaultValueDate
                }else{
                    defaultValue = nowDate
                    datePickerView.selectedDate = nowDate
                }
                datePickerView.maxDate = Date(timeIntervalSinceNow: 100 * 60 * 60 * 24 * 365)
                datePickerView.minDate = nowDate
                addSubview(datePickerView)
            case .cycle(hasNone: let hasNone):      //修改周期
                self.hasNone = hasNone
                pickerView = UIPickerView(frame: pickerViewFrame)
                pickerView?.delegate = self
                pickerView?.dataSource = self
                addSubview(pickerView!)
                
                if let defaultCycle = defaultValue as? FrequencyCycle{
                    var offset = hasNone ? 0 : 1    //反的 每写错 - -
                    if defaultCycle.rawValue > 1 {
                        offset += 1
                    }
                    pickerView?.selectRow(defaultCycle.rawValue - offset, inComponent: 0, animated: true)
                }
                
                //添加分割线
                for i in 0..<2{
                    let vy = CGFloat(i) * componentHeight + (bounds.height - componentHeight) / 2
                    let vframe = CGRect(x: 0, y: vy, width: bounds.width, height: 0.5)
                    let vsep = UIView(frame: vframe)
                    vsep.backgroundColor = UIColor(colorHex: 0xdddddd)
                    addSubview(vsep)
                }
            default:            //日期或星期修改
                pickerView = UIPickerView(frame: pickerViewFrame)
                pickerView?.delegate = self
                pickerView?.dataSource = self
                addSubview(pickerView!)
                
                if let baseOnWeek = defaultValue as? Bool{
                    let row = baseOnWeek ? 1 : 0
                    pickerView?.selectRow(row, inComponent: 0, animated: true)
                }
                
                //添加分割线
                for i in 0..<2{
                    let vy = CGFloat(i) * componentHeight + (bounds.height - componentHeight) / 2
                    let vframe = CGRect(x: 0, y: vy, width: bounds.width, height: 0.5)
                    let vsep = UIView(frame: vframe)
                    vsep.backgroundColor = UIColor(colorHex: 0xdddddd)
                    addSubview(vsep)
                }
            }
            
            //添加通用ui
            createContents()
            
        }
    }
    
    private func createContents(){
        
        //header
        let headerLabelFrame = CGRect(x: 0, y: 0, width: frame.width, height: headerHeight)
        let headerLabel = UILabel(frame: headerLabelFrame)
        var text = ""
        if let selType = frequencySelectorType{
            switch selType{
            case .cycle:
                text = "周期"
            case .interval(let (cycle, _)):
                let index = cycle.rawValue
                text =  frequencyCycleList[index > 1 ? index - 1 : index]
//                text = "周期数"
            case .baseOnWeek:
                text = "日期或星期"
            case .date:
                text = "日期选择"
            }
        }
        headerLabel.text = text
        headerLabel.textAlignment = .center
        headerLabel.textColor = .subWord
        headerLabel.font = .normal
        addSubview(headerLabel)
        
        
        
        
        //两个按钮取消确定
        let cancelButtonFrame = CGRect(x: 0, y: frame.height - buttonHeight, width: frame.width / 2, height: buttonHeight)
        let cancelButton = UIButton(frame: cancelButtonFrame)
        cancelButton.setTitle("取消", for: .normal)
        cancelButton.setTitleColor(UIColor(colorHex: 0x666666), for: .normal)
        cancelButton.titleLabel?.font = UIFont(withNormalFontSize: 15)
        cancelButton.tag = 0
        cancelButton.addTarget(self, action: #selector(click(_:)), for: .touchUpInside)
        addSubview(cancelButton)
        
        drawCorner(withBottomLeft: true, withBottomRight: false, withButton: cancelButton)
        
        let confirmButtonFrame = CGRect(x: frame.width / 2, y: frame.height - buttonHeight, width: frame.width / 2, height: buttonHeight)
        let confirmButton = UIButton(frame: confirmButtonFrame)
        confirmButton.setTitle("确定", for: .normal)
        confirmButton.setTitleColor(.confirm, for: .normal)
        confirmButton.titleLabel?.font = UIFont(withSemiboldFontSize: 15)
        confirmButton.tag = 1
        confirmButton.addTarget(self, action: #selector(click(_:)), for: .touchUpInside)
        addSubview(confirmButton)
        
        drawCorner(withBottomLeft: false, withBottomRight: true, withButton: confirmButton)
        
        //分割线
        let separatorFrame0 = CGRect(x: 0, y: frame.height - buttonHeight, width: frame.width, height: 1)
        let separator0 = UIView(frame: separatorFrame0)
        separator0.backgroundColor = UIColor(colorHex: 0xdddddd)
        addSubview(separator0)
        
        let separatorFrame1 = CGRect(x: 0, y: headerHeight - 1, width: frame.width, height: 1)
        let separator1 = UIView(frame: separatorFrame1)
        separator1.backgroundColor = UIColor(colorHex: 0xdddddd)
        addSubview(separator1)
        
        let vSeparatorFrame = CGRect(x: frame.width / 2 - 0.5, y: (frame.height - buttonHeight + 1) + (buttonHeight - 24) / 2, width: 1, height: 24)
        let vSeparator = UIView(frame: vSeparatorFrame)
        vSeparator.backgroundColor = UIColor(colorHex: 0x666666).withAlphaComponent(0.1)
        addSubview(vSeparator)
        
        
    }
    
    //MARK:- 选择日期或时间
    @objc private func selectedDate(sender: UIDatePicker){
        guard frequencySelectorType != nil else{
            return
        }
        
        defaultValue = sender.countDownDuration
    }
    
    //MARK:- 点击按钮
    @objc private func click(_ sender: UIButton){
        guard let selType = frequencySelectorType else{
            return
        }
        
        let tag = sender.tag
        var selectorValueType: FrequencySelectorValueType?
        if tag == 1{
            switch selType{
            case .cycle:
                if let row = pickerView?.selectedRow(inComponent: 0){
                    var offset = row > 0 ? 1 : 0
                    if !hasNone{
                        offset += 1
                    }
                    if let frequencyCyele = FrequencyCycle(rawValue: row + offset){
                        selectorValueType = FrequencySelectorValueType.cycle(frequencyCyele)
                    }
                }
            case .baseOnWeek:
                if let row = pickerView?.selectedRow(inComponent: 0){
                    selectorValueType = FrequencySelectorValueType.baseOnWeek(row == 1)
                }
            case .interval(let (cycle, _)):
                if cycle == FrequencyCycle.minute{
                    if let timeInterval = self.defaultValue as? Date{
                        let components = calendar.dateComponents([.hour, .minute], from: timeInterval)
                        let hour = components.hour ?? 0
                        let minute = components.minute ?? 0
                        let interval = hour * 60 + minute
                        selectorValueType = FrequencySelectorValueType.interval(interval)
                    }
                }else if let row = pickerView?.selectedRow(inComponent: 0){
                    selectorValueType = FrequencySelectorValueType.interval(row + 1)
                }
            case .date:
                if let date = defaultValue as? Date{
                    selectorValueType = FrequencySelectorValueType.date(date)
                }
            }
        }else{
            selectorValueType = nil
        }
        
        closure?(tag == 1, selectorValueType)
    }
    
    
    //MARK:- 设置按钮圆角
    private func drawCorner(withBottomLeft bottomLeftFlag: Bool, withBottomRight bottomRightFlag: Bool, withButton button: UIButton){
        let size  = CGSize(width: .cornerRadius, height: .cornerRadius)
        let corner : UIRectCorner
        if bottomLeftFlag && bottomRightFlag{
            corner = [.bottomLeft, .bottomRight]
        }else if bottomLeftFlag{
            corner = [.bottomLeft]
        }else if bottomRightFlag{
            corner = [.bottomRight]
        }else{
            corner = []
        }
        
        let maskFrame = button.bounds
        let path = UIBezierPath(roundedRect: maskFrame, byRoundingCorners: corner, cornerRadii: size)
        let maskLayer = CAShapeLayer()
        maskLayer.frame = maskFrame
        maskLayer.path = path.cgPath
        button.layer.mask = maskLayer
    }
}


//MARK:- picker delegate (仅提醒次数使用)
extension FrequencySelector: UIPickerViewDelegate, UIPickerViewDataSource{
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        guard let selType = frequencySelectorType else {
            return 0
        }
        
        if case .baseOnWeek = selType{
            return 2
        }else if case FrequencySelectorType.interval(let (_, list)) = selType{
            return list.count
        }else{
            
            return hasNone ? frequencyCycleList.count : frequencyCycleList.count - 1
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, rowHeightForComponent component: Int) -> CGFloat {
        return componentHeight
    }
    
//    func pickerView(_ pickerView: UIPickerView, attributedTitleForRow row: Int, forComponent component: Int) -> NSAttributedString? {
//        guard let selType = frequencySelectorType else {
//            return nil
//        }
//
//        let text: String
//        if case .baseOnWeek = selType{
//            text = row == 0 ? "日期" : "星期"
//        }else if case FrequencySelectorType.interval(let (_, list)) = selType{
//            text = "\(list[row])"
//        }else{
//            text = frequencyCycleList[hasNone ? row : row + 1]
//        }
//
//        let attributes = [NSAttributedStringKey.font: UIFont.content, NSAttributedStringKey.foregroundColor: UIColor.subWord]
//        let attributedString = NSAttributedString(string: text, attributes: attributes)
//        return attributedString
//    }
    
    func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
        guard let selType = frequencySelectorType else {
            return UIView()
        }
        
        var text: String
        if case .baseOnWeek = selType{
            text = row == 0 ? "日期" : "星期"
        }else if case FrequencySelectorType.interval(let (_, list)) = selType{
            text = "\(list[row])"
        }else{
            text = frequencyCycleList[hasNone ? row : row + 1]
        }
        
        //主cell
        let pickerLabel0 = pickerView.view(forRow: row, forComponent: component) as? UILabel
        pickerLabel0?.backgroundColor = .clear
        pickerLabel0?.font = UIFont(withSemiboldFontSize: 17)
        
        
        //其他小cell
        let frame = CGRect(x: 0, y: 0, width: bounds.width / 3, height: 55)
        let pickerLabel = UILabel(frame: frame)
        pickerLabel.font = UIFont(withNormalFontSize: 17)
        pickerLabel.textColor = UIColor(colorHex: 0x333333)
        
        pickerLabel.backgroundColor = .clear
        pickerLabel.layer.transform = CATransform3DIdentity
        pickerLabel.textAlignment = .center
        
        let attributedString = NSMutableAttributedString(string: text, attributes: [NSAttributedStringKey.foregroundColor : UIColor(colorHex: 0x333333), NSAttributedStringKey.font: UIFont(withNormalFontSize: 17)])
        pickerLabel.attributedText = attributedString
        
//        var length = 0
//        if case .interval = selType {
//            length = 1
//            text += "    _"
//        }else if case .targetStep = selType {
//            length = 1
//            text += "  _"
//        }
        let attributedString0 = NSMutableAttributedString(string: text, attributes: [NSAttributedStringKey.foregroundColor : UIColor(colorHex: 0x333333), NSAttributedStringKey.font: UIFont(withNormalFontSize: 17)])
//        attributedString0.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.clear, range: NSMakeRange(text.count - 1, length))
        pickerLabel0?.attributedText = attributedString0
        
        return pickerLabel
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        guard frequencySelectorType != nil else {
            return
        }
    }
}


