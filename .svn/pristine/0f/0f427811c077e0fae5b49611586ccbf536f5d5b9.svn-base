//
//  GANLunarPicker.swift
//  Remind
//
//  Created by gg on 17/01/2018.
//  Copyright © 2018 ganyi. All rights reserved.
//自定义公历日期

import Foundation
class GANSolarPicker: UIPickerView {
    
    ///最小日期（必须）
    var minDate: Date!
    ///最大日期（必须）
    var maxDate: Date!
    
    var isShow = false{
        didSet{
            isHidden = !isShow
        }
    }
    
    ///是否隐藏年份
    var isIgnoreYear = false{
        didSet{
            yearLabel.isHidden = isIgnoreYear
            
            monthLabel.frame.origin.x = monthLabelX
            dayAndWeekdayLabel.frame.origin.x = dayAndWeekdayLabelX
            
            //更新星期数
            dayAndWeekdayLabel.text = isIgnoreYear ? "日" : "日, " + solarDate.weekdayString()
            
            //刷新ui
            reloadAllComponents()
            initSelectedDate()
        }
    }
    
    ///判断是否为重要事件
    var isClient = false
    ///判断事件类型
    var eventType = 0
    
    
    
    //农历
    var lunarDate: LunarDate? {
        didSet{
            guard let lDate = lunarDate else {
                return
            }            
            solarDate = transformLunarToGregorian(byLunarDate: lDate)
        }
    }
    
    ///默认选择日期（必须）
    var solarDate = Date() {
        didSet{
//            if solarDate.formatString(with: "yyy-M-d") == oldValue.formatString(with: "yyy-M-d") {
//                return
//            }
            
            //刷新控件
            //reloadAllComponents()
            initSelectedDate()
        }
    }
    
    ///选择回调
    var selectedClosure: ((Date)->())?
    
    //private---------------------------------------------------------------------------    
    private lazy var componentWidth: CGFloat! = {
        return self.frame.width / 3
    }()
    private let componentHeight: CGFloat = 52
    private lazy var yearLabel: UILabel! = {
        let frame = CGRect(x: componentWidth * 0.6, y: (self.frame.height - componentHeight) / 2 + (17 - 9) / 4, width: 21, height: componentHeight)
        let label = UILabel(frame: frame)
        label.backgroundColor = .clear
        label.font = UIFont(withNormalFontSize: 9)
        label.textColor = UIColor(colorHex: 0x333333)
        label.text = "年"
        return label
    }()
    private var monthLabelX: CGFloat {
        get{
            if isIgnoreYear{
                return componentWidth
            }
            return componentWidth * 0.55 + componentWidth
        }
    }
    private lazy var monthLabel: UILabel! = {
        let frame = CGRect(x: monthLabelX, y: (self.frame.height - componentHeight) / 2 + (17 - 9) / 4, width: 21, height: componentHeight)
        let label = UILabel(frame: frame)
        label.backgroundColor = .clear
        label.font = UIFont(withNormalFontSize: 9)
        label.textColor = UIColor(colorHex: 0x333333)
        label.text = "月"
        return label
    }()
    
    private var dayAndWeekdayLabelX: CGFloat {
        get{
            if isIgnoreYear{
                return componentWidth * 0.4 + componentWidth * 2
            }
            return componentWidth * 0.45 + componentWidth * 2
        }
    }
    fileprivate lazy var dayAndWeekdayLabel: UILabel! = {
        let frame = CGRect(x: self.dayAndWeekdayLabelX, y: (self.frame.height - componentHeight) / 2 + (17 - 9) / 4, width: componentWidth / 2, height: componentHeight)
        let label = UILabel(frame: frame)
        label.backgroundColor = .clear
        label.font = UIFont(withNormalFontSize: 9)
        label.textColor = UIColor(colorHex: 0x333333)
        label.text = "日, " + self.solarDate.weekdayString()
        return label
    }()
    
    //MARK:- init--------------------------------------------------------------------------------------
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        config()
        createContents()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
        
        reloadAllComponents()
        
        initSelectedDate()
    }
    
    //MARK:- 初始化选择日期
    private func initSelectedDate(){
        
        guard minDate != nil, maxDate != nil else {
            return
        }
        
        //获取月份选择
        let selectedMonthRow = calendar.component(.month, from: solarDate)
        
        //获取日选择
        let selectedDayRow = calendar.component(.day, from: solarDate)
        
        if isIgnoreYear{
            reloadComponent(0)
            selectRow(selectedMonthRow - 1, inComponent: 0, animated: true)
            reloadComponent(1)
            selectRow(selectedDayRow - 1, inComponent: 1, animated: true)
        }else{
            //获取年份选择
            let minYear = calendar.component(.year, from: minDate)
            let selectedYear = calendar.component(.year, from: solarDate)
            
            selectRow(labs(selectedYear - minYear), inComponent: 0, animated: true)
            reloadComponent(1)
            selectRow(selectedMonthRow - 1, inComponent: 1, animated: true)
            reloadComponent(2)
            selectRow(selectedDayRow - 1, inComponent: 2, animated: true)
        }
        
        dayAndWeekdayLabel.text = isIgnoreYear ? "日" : "日, " + solarDate.weekdayString()
        
    }
    
    private func config(){
        
        delegate = self
        dataSource = self
        
        backgroundColor = UIColor.clear
        
        addSubview(yearLabel)
        addSubview(monthLabel)
        addSubview(dayAndWeekdayLabel)
        
    }
    
    private func createContents(){
        
    }
}

extension GANSolarPicker: UIPickerViewDelegate, UIPickerViewDataSource{
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        if isIgnoreYear{
            return 2
        }
        return 3
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        if isIgnoreYear{
            if component == 0{
                return 12
            }
            let row0 = pickerView.selectedRow(inComponent: 0)
            let month = row0 + 1
            switch month{
            case 2:             //2月份默认29天
                return 29
            case 4, 6, 9, 11:
                return 30
            default:
                return 31
            }
        }
        
        let minYear = calendar.component(.year, from: minDate)
        let maxYear = calendar.component(.year, from: maxDate)
        let minMonth = calendar.component(.month, from: minDate)
        let maxMonth = calendar.component(.month, from: maxDate)
        let minDay = calendar.component(.day, from: minDate)
        let maxDay = calendar.component(.day, from: maxDate)
        let row0 = pickerView.selectedRow(inComponent: 0)
        
        switch component {
        case 0:     //年
            return labs(maxYear - minYear) + 1
        case 1:     //月
            if row0 == 0{                       //最小年份
                return 12 - minMonth + 1
            }else if row0 == maxYear - minYear{         //最大年份
                return maxMonth
            }
            return 12
        default:
            let days = calendar.range(of: .day, in: .month, for: solarDate)?.count ?? 0
            
            let row1 = pickerView.selectedRow(inComponent: 1)
            if row0 == 0 && row1 == 0{          //最小月份
                return days - minDay + 1
            }else if row0 == maxYear - minYear && row1 == maxMonth - 1{ //最大月份
                return maxDay
            }
            return days
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
        pickerView.subviews[4].isHidden = true
        pickerView.subviews[5].isHidden = true
        
        //主cell
        let pickerLabel0 = pickerView.view(forRow: row, forComponent: component) as? UILabel
        pickerLabel0?.backgroundColor = .clear
        pickerLabel0?.font = UIFont(withSemiboldFontSize: 17)
        
        let minYear = calendar.component(.year, from: minDate)
        let minMonth = calendar.component(.month, from: minDate)
        let minDay = calendar.component(.day, from: minDate)
        
        let row0 = pickerView.selectedRow(inComponent: 0)
        
        var tempComponent = component
        if isIgnoreYear{
            tempComponent += 1
        }
        
        let text: String
        switch tempComponent {
        case 0:     //年
            text = "\(minYear + row)  _"
        case 1:     //月
            var month = row + 1
            if row0 == 0{
                month = row + minMonth
            }
            let monthStr = month < 10 ? "0\(month)" : "\(month)"
            text = monthStr + " _"
        default:    //日
            var day = row + 1
            
            let row1 = pickerView.selectedRow(inComponent: 1)
            if row0 == 0 && row1 == 0{
                day = row + minDay
            }
            
            let dayStr = day < 10 ? "0\(day)" : "\(day)"
            text = dayStr + "      _"
        }
        let attributedString0 = NSMutableAttributedString(string: text, attributes: [NSAttributedStringKey.foregroundColor : UIColor(colorHex: 0x333333), NSAttributedStringKey.font: UIFont(withNormalFontSize: 17)])
        attributedString0.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.clear, range: NSMakeRange(text.count - 1, 1))
        pickerLabel0?.attributedText = attributedString0
        
        
        //其他小cell
        let frame = CGRect(x: 0, y: 0, width: componentWidth, height: componentHeight)
        let pickerLabel = UILabel(frame: frame)
        pickerLabel.font = UIFont(withNormalFontSize: 17)
        pickerLabel.textColor = UIColor(colorHex: 0x333333)
        
        pickerLabel.backgroundColor = .clear
        pickerLabel.textAlignment = .center
        
        let attributedString = NSMutableAttributedString(string: text, attributes: [NSAttributedStringKey.foregroundColor : UIColor(colorHex: 0x333333), NSAttributedStringKey.font: UIFont(withNormalFontSize: 17)])
        attributedString.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.clear, range: NSMakeRange(text.count - 1, 1))
        pickerLabel.attributedText = attributedString
        pickerLabel.transform = CGAffineTransform.identity
        return pickerLabel
    }
    
    func pickerView(_ pickerView: UIPickerView, rowHeightForComponent component: Int) -> CGFloat {
        return componentHeight
    }
    
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        
        switch component {
        case 0:
            pickerView.reloadComponent(1)
            if !isIgnoreYear{
                pickerView.reloadComponent(2)
            }
        case 1:
            if !isIgnoreYear{
                pickerView.reloadComponent(2)
            }
        default:
            break
        }
        
        let minYear = calendar.component(.year, from: minDate)
        
        //选择回调
        let offset = isIgnoreYear ? 1: 0
        let yearRow = isIgnoreYear ? calendar.component(.year, from: solarDate) - minYear : pickerView.selectedRow(inComponent: 0)
        let monthRow = pickerView.selectedRow(inComponent: 1 - offset)
        let dayRow = pickerView.selectedRow(inComponent: 2 - offset)
        
        let year = minYear + yearRow
        let month = monthRow + 1
        let day = dayRow + 1
        
        var components = calendar.dateComponents([.year, .month, .day], from: Date())
        components.year = year
        components.month = month
        components.day = day
        guard let selectedDate = calendar.date(from: components)?.GMT() else{
            return
        }
        
        //限制范围
        if !isIgnoreYear {
            if selectedDate < minDate{
                selectedClosure?(minDate)
                self.solarDate = minDate
                return
            }else if selectedDate > maxDate{
                selectedClosure?(maxDate)
                self.solarDate = maxDate
                return
            }
        }
        
        //返回选择事件
        selectedClosure?(selectedDate)
        
        self.solarDate = selectedDate
        
        //更新星期数
        dayAndWeekdayLabel.text = isIgnoreYear ? "日" : "日, " + selectedDate.weekdayString()
    }
}
