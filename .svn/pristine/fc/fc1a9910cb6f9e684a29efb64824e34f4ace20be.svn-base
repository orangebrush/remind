//
//  PushTransitioning.swift
//  Remind
//
//  Created by gg on 28/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
class PushTransitioning: NSObject, UIViewControllerAnimatedTransitioning {
    
    fileprivate weak var transitionContext: UIViewControllerContextTransitioning?
    fileprivate weak var fromViewController: UIViewController?
    fileprivate weak var toViewController: UIViewController?
    
    private var startRect: CGRect?
    
    convenience init(startRect: CGRect) {
        self.init()
        
        self.startRect = startRect
    }
    
    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {
        
        return 0.3
    }
    
    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {
        
        self.transitionContext = transitionContext
        
        toViewController = transitionContext.viewController(forKey: UITransitionContextViewControllerKey.to)
        fromViewController = transitionContext.viewController(forKey: .from)
        
        let finalFrame = transitionContext.finalFrame(for: toViewController!)
        
        let containerView = transitionContext.containerView
        
        let screenBounds = UIScreen.main.bounds
        toViewController?.view.frame = finalFrame.offsetBy(dx: 0, dy: 0)
        
        let toViewView = toViewController!.view
        containerView.addSubview(toViewView!)
        
        
        
        
        //动画。。。。。
//        let count = 10
//
//        var values = [CGFloat]()
//        for i in 0..<count{
//            let value = screenBounds.height / 2 * 3 - CGFloat(i) / CGFloat(count) * screenBounds.height
//            values.append(value)
//        }
//
//        let secondKeyTime: TimeInterval = 0.333
//
//        let interval = secondKeyTime / TimeInterval(count) //getInterval(withCount: count)
//        var keyTimes = [NSNumber]()
//        for i in 0..<count{
//            let keyTime = interval * TimeInterval(i)
//            keyTimes.append(NSNumber(value: Float(keyTime)))
//        }
        
        let heightBegin = screenBounds.height / 2 * 3       //开始
        let heightEnd = screenBounds.height / 2           //结束
        let height1 = heightEnd + (heightBegin - heightEnd) / 4 * 3
        let height2 = heightEnd + (heightBegin - heightEnd) / 4 * 2
        let height3 = heightEnd + (heightBegin - heightEnd) / 4 * 1

        let values = [heightBegin, height1, height2, height3, heightEnd]
        let keyTimes = [0, 0.1, 0.23, 0.56, 1]
        
        let maskAnim = CAKeyframeAnimation(keyPath: "position.y")
        maskAnim.values = values
        maskAnim.keyTimes = keyTimes as [NSNumber]
        maskAnim.duration = 0.4
        maskAnim.isRemovedOnCompletion = true
        maskAnim.fillMode = kCAFillModeBoth
        maskAnim.delegate = self
        //maskAnim.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
        toViewController?.view.layer.add(maskAnim, forKey: nil)
    }
    
    private func getInterval(withCount count: Int) -> TimeInterval{
        var total = 0
        for i in 0..<count{
            total += i
        }
        
        return 1 / TimeInterval(total)
    }
}

//MARK:- 路径动画代理
extension PushTransitioning: CAAnimationDelegate{
    
    func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
        
        transitionContext?.completeTransition(true)
    }
}
