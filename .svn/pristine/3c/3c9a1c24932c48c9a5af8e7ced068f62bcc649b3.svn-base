//
//  PlayCountPickView.swift
//  Remind
//
//  Created by zxd on 2017/12/19.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit
protocol closeBtnClick:class  {
    func closeBtnClick(_ selfview:PlayCountPickView)
    func cellClick(_ indexPath:IndexPath,_ selfview:PlayCountPickView)
}
class PlayCountPickView: UIView ,UITableViewDelegate,UITableViewDataSource{
   
    var nameArr = [String]()
    var selectIndex = 0
    weak var delegate : closeBtnClick?
    fileprivate lazy var tableview : UITableView = {
       let view = UITableView.init(frame: CGRect.zero, style: .grouped)
        view.backgroundColor = UIColor.white
        view.separatorColor = UIColor.separator
       // view.separatorInset = UIEdgeInsetsMake(0, 0, 0, 0)
        view.delegate = self
        view.dataSource = self
        view.layer.cornerRadius = CGFloat.cornerRadius
        view.clipsToBounds = true
        view.isScrollEnabled = false
        return view
    }()

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.addSubview(tableview)
        tableview.snp.makeConstraints { (make) in
            make.bottom.right.equalTo(-10)
            make.left.equalTo(10)
            make.height.equalTo(nameArr.count*45+90)
        }
        
    }
    func congfigView(_ nameArr : [String],_ selectInsex:Int){
        self.nameArr = nameArr
        self.selectIndex = selectInsex
        tableview.reloadData()
        tableview.snp.updateConstraints { (make) in
            make.height.equalTo(nameArr.count*45+90)
        }
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return nameArr.count
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 45
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: "cellID")
        if (cell == nil){
            cell = UITableViewCell.init(style: .default, reuseIdentifier: "cellID")
        }
        while ((cell?.contentView.subviews.last) != nil) {
            cell?.contentView.subviews.last?.removeFromSuperview()
        }
        cell?.backgroundColor = UIColor.header.withAlphaComponent(1)
        configView(cell!, indexPath)
        return cell!
    }
    func configView(_ cell:UITableViewCell,_ indexPath:IndexPath){
        let label = UILabel.init()
        label.text = nameArr[indexPath.row]
        label.textColor = UIColor.word
        label.font = UIFont.normal
        cell.contentView.addSubview(label)
        let imageView = UIImageView.init()
        imageView.image = #imageLiteral(resourceName: "select")
        cell.contentView.addSubview(imageView)
        if indexPath.row == selectIndex{
            imageView.isHidden = false
            cell.backgroundColor = UIColor.white
        }else{
            imageView.isHidden = true
            cell.backgroundColor = UIColor.header.withAlphaComponent(1)
        }
        
        label.snp.makeConstraints { (make) in
            make.right.equalTo(imageView.snp.left).offset(-5)
            make.left.equalTo(15)
            make.top.bottom.equalTo(0)
        }
        imageView.snp.makeConstraints { (make) in
            make.width.height.equalTo(15)
            make.centerY.equalToSuperview()
            make.right.equalTo(-15)
        }
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 45
    }
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 45
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView.init(frame: CGRect.init(x: 0, y: 0, width: keyDeviceWidth-10, height: 45))
        let label = UILabel.init(frame: view.bounds)
        label.text = "首页卡片设置"
        label.textAlignment = .center
        label.textColor = UIColor.word
        label.font = UIFont.normal
        view.addSubview(label)
        return view
    }
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        let view = UIView.init(frame: CGRect.init(x: 0, y: 0, width: keyDeviceWidth-20, height: 45))
        let label = UILabel.init(frame: view.bounds)
        label.text = "关闭"
        label.textAlignment = .center
        label.textColor = UIColor.word
        label.font = UIFont.normal
        let tap = UITapGestureRecognizer.init(target: self, action: #selector(PlayCountPickView.close))
        label.addGestureRecognizer(tap)
        label.isUserInteractionEnabled = true
        view.addSubview(label)
        return view
    }
    @objc func close(){
        delegate?.closeBtnClick(self)
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        delegate?.cellClick(indexPath, self)
    }
    
}
