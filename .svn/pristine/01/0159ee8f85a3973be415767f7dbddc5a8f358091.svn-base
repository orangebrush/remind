//
//  remainSetingTableViewCell.swift
//  Remind
//
//  Created by zxd on 2017/12/22.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit
protocol  remainSetingTableViewCellDelegate:class {
    func switchValueChange(_ indexPath:IndexPath,_ open:Bool)
}
class remainSetingTableViewCell: UITableViewCell {
    weak var delegate : remainSetingTableViewCellDelegate?
    var nameArr = ["提醒","提醒时间","提醒次数","间隔时间","预提醒","提示音"]
    var smallNameArr = ["提醒","提醒时间","提醒次数","预提醒","提示音"]
    var nameArr1 = ["微信","电子邮箱"]
    var cellIndexPath : IndexPath?
    fileprivate lazy var leftLabel : UILabel = {
        let label = UILabel.init()
        label.font = UIFont.normal
        label.textColor = UIColor.word
        return label
    }()
    fileprivate lazy var leftImageView : UIImageView = {
        let img = UIImageView.init()
        return img
    }()
    fileprivate lazy var rightLabel : UILabel = {
        let label = UILabel.init()
        label.font = UIFont.content
        label.textAlignment = .right
        label.textColor = UIColor.subSubWord
        return label
    }()
    fileprivate lazy var swith : UISwitch = {
       let swithch = UISwitch.init()
        swithch.backgroundColor = UIColor.subSubWord
        swithch.tintColor = UIColor.subSubWord
        swithch.transform = CGAffineTransform.init(scaleX: 0.6, y: 0.6)
        return swithch
    }()
    fileprivate lazy var rightImageView : UIImageView = {
        let img = UIImageView.init()
        return img
    }()
    fileprivate lazy var backView : UIView = {
        let view = UIView.init()
        view.backgroundColor = UIColor.white
        return view
    }()
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        self.selectionStyle = .none
        self.backgroundColor = UIColor.clear
        backView.frame = CGRect.init(x: 10, y: 0, width: keyDeviceWidth-20, height: 50)
        self.addSubview(backView)
        backView.addSubview(leftLabel)
        backView.addSubview(leftImageView)
        backView.addSubview(rightLabel)
        backView.addSubview(rightImageView)
        swith.addTarget(self, action: #selector(remainSetingTableViewCell.swithValueChange(_:)), for: .valueChanged)
        backView.addSubview(swith)
    }

    func configView(_ indexPath:IndexPath,_ fileSet:FestivalSettingFieldModel,_ clip:Bool,_ eventDate:Date,_ eventCount:Int,_ eventInterval:Int,_ eventSound:String,_ eventBeginningModel:BeginningModel){
        self.leftLabel.snp.removeConstraints()
        self.leftImageView.snp.removeConstraints()
        self.rightLabel.snp.removeConstraints()
        self.rightImageView.snp.removeConstraints()
        self.cellIndexPath = indexPath
        backView.resetNomalView()
        if indexPath.row == 0{
            backView.drawTopRectView()
        }
        if clip{
            backView.drawRectView()
        }
        var labeleft : CGFloat = 15
        leftLabel.textColor = UIColor.word
        if eventCount>1{
            if indexPath.section == 2 && indexPath.row == 3{
                labeleft = 42
                leftLabel.textColor  = UIColor.subSubWord
            }
            
        }
       if indexPath.section == 3{
            labeleft = 62
        }
        leftLabel.snp.makeConstraints { (make) in
            make.left.equalTo(labeleft)
            make.bottom.top.equalTo(0)
            make.width.equalTo(150)
        }
        if eventCount > 1{
            leftLabel.text = indexPath.section == 2 ? nameArr[indexPath.row] : nameArr1[indexPath.row]
        }else{
            leftLabel.text = indexPath.section == 2 ? smallNameArr[indexPath.row] : nameArr1[indexPath.row]
        }
        
        
        leftImageView.snp.makeConstraints { (make) in
            make.width.height.equalTo(25)
            make.centerY.equalToSuperview()
            make.left.equalTo(20)
        }
        if indexPath.section == 3{
            leftImageView.isHidden = false
            leftImageView.image = indexPath.row == 0 ? #imageLiteral(resourceName: "pro_wechat") : #imageLiteral(resourceName: "pro_email")
        }else{
            leftImageView.isHidden = true
        }
        
        swith.snp.makeConstraints { (make) in
            make.right.equalTo(-18)
            make.centerY.equalToSuperview()
        }
        swith.clipsToBounds = true
        swith.layer.cornerRadius = swith.bounds.height/2.0
        
        rightImageView.snp.makeConstraints { (make) in
            make.right.equalTo(-15)
            make.height.equalTo(12)
            make.width.equalTo(6)
            make.centerY.equalToSuperview()
        }
        rightImageView.image = #imageLiteral(resourceName: "go_detail")
    
        if indexPath.section == 3 || indexPath.row == 0{
            swith.isHidden = false
            if indexPath.section == 3{
                if indexPath.row == 0{
                    swith.isOn = fileSet.byWeixin
                }else{
                    swith.isOn = fileSet.byEmail
                }
            }else{
                swith.isOn = fileSet.isNotif
            }
        
            rightImageView.isHidden = true
        }else{
            swith.isHidden = true
            rightImageView.isHidden = false
        }
        
        rightLabel.snp.makeConstraints { (make) in
            make.top.bottom.equalTo(0)
            make.right.equalTo(-33)
            make.left.equalTo(leftLabel.snp.right).offset(5)
        }
        if indexPath.section == 3 || indexPath.row == 0{
            rightLabel.isHidden = true
        }else{
            rightLabel.isHidden = false
            if eventCount > 1{
                switch indexPath.row{
                    
                case 1:
                    rightLabel.text = "\(eventDate.formatString(with: "hh:mm"))"
                    break
                case 2:
                    rightLabel.text = "\(eventCount)次"
                    break
                case 3:
                    rightLabel.text = "\(eventInterval)分钟"
                    break
                case 4:
                    var value = eventBeginningModel.list.isEmpty ? "无预提醒" : ""
                    let sortedEventBeginningList = eventBeginningModel.list.sorted(by: { (arg0, arg1) -> Bool in
                        
                        let (cycle0, value0) = arg0
                        let (cycle1, value1) = arg1
                        if cycle0.rawValue < cycle1.rawValue{
                            return true
                        }else if cycle0.rawValue > cycle1.rawValue{
                            return false
                        }else{
                            if value0 < value1{
                                return true
                            }
                        }
                        return false
                    })
                    for (index, tuple) in sortedEventBeginningList.enumerated(){
                        if index != 0{
                            value += ","
                        }
                        value += "\(tuple.1)"
                        
                        let prefixValue: String
                        switch tuple.0{
                        case .minute:
                            prefixValue = "分钟"
                        case .hour:
                            prefixValue = "小时"
                        case .day:
                            prefixValue = "天"
                        case .week:
                            prefixValue = "周"
                        case .month:
                            prefixValue = "月"
                        case .year:
                            prefixValue = "年"
                        default:
                            prefixValue = ""
                        }
                        value += prefixValue
                    }
                    
                    rightLabel.text = value
                    break
                case 5:
                    rightLabel.text = eventSound
                    break
                default :
                    break
                }
            }else{
                switch indexPath.row{
                    
                case 1:
                    rightLabel.text = "\(eventDate.formatString(with: "hh:mm"))"
                    break
                case 2:
                    rightLabel.text = "\(eventCount)次"
                    break
                
                case 3:
                    var value = eventBeginningModel.list.isEmpty ? "无预提醒" : ""
                    let sortedEventBeginningList = eventBeginningModel.list.sorted(by: { (arg0, arg1) -> Bool in
                        
                        let (cycle0, value0) = arg0
                        let (cycle1, value1) = arg1
                        if cycle0.rawValue < cycle1.rawValue{
                            return true
                        }else if cycle0.rawValue > cycle1.rawValue{
                            return false
                        }else{
                            if value0 < value1{
                                return true
                            }
                        }
                        return false
                    })
                    for (index, tuple) in sortedEventBeginningList.enumerated(){
                        if index != 0{
                            value += ","
                        }
                        value += "\(tuple.1)"
                        
                        let prefixValue: String
                        switch tuple.0{
                        case .minute:
                            prefixValue = "分钟"
                        case .hour:
                            prefixValue = "小时"
                        case .day:
                            prefixValue = "天"
                        case .week:
                            prefixValue = "周"
                        case .month:
                            prefixValue = "月"
                        case .year:
                            prefixValue = "年"
                        default:
                            prefixValue = ""
                        }
                        value += prefixValue
                    }
                    
                    rightLabel.text = value
                    break
                case 4:
                    rightLabel.text = eventSound
                    break
                default :
                    break
                }
            }
            
        }
        
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    @objc func swithValueChange(_ swith:UISwitch){
        delegate?.switchValueChange(self.cellIndexPath!, swith.isOn)
     }
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }

}
