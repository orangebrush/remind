//
//  remainedTableViewController.swift
//  Remind
//
//  Created by zxd on 2017/12/25.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit

class remainedTableViewController: BasedTableViewController {
    var page = 1
    var noticeList = [Notice]()
    var stingArr = [String]()
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.separatorStyle = .none
        tableView.backgroundColor = UIColor.clear
        tableView.register(noticeTableViewCell.self, forCellReuseIdentifier: "noticeTableViewCell")
        self.addHeadFooter()
        self.getMianData(self.page)
        self.updateBackground()
        let item = BarButtonItem(textStr: "清空", tSelector: #selector(remainedTableViewController.deleteBtnClick))
        self.navigationItem.rightBarButtonItems = customItemsPosition(items: [item], position: .right)
        self.title = "提醒消息"
    }
    
    //MARK:- 清空数据接口
    @objc func deleteBtnClick(){
        
        if self.noticeList.count == 0{
            return
        }
        
        let alertVC = UIAlertController.init(title: "是否清空所有消息", message: nil, preferredStyle: .actionSheet)
        let confrimAction = UIAlertAction.init(title: "确定", style: .default) { (action) in
            DataManager.share().deleteAllNotices { (result, message) in
                if result == .failure{
                    self.notif(withTitle: message)
                    return
                }
                self.noticeList.removeAll()
                self.page = 1
                self.tableView.reloadData()
            }
        }
        let cancalAction = UIAlertAction.init(title: "取消", style: .cancel) { (action) in
            
        }
        alertVC.addAction(confrimAction)
        alertVC.addAction(cancalAction)
        self.present(alertVC, animated: true, completion: nil)
        
        
    }
    @objc func backBtnClick(){
        self.navigationController?.popViewController(animated: true)
    }
    //MARK:- 获取tableview的数据
    func getMianData(_ page:Int){
        
        DataManager.share().getOtherNoticeList(withPage: self.page) { (result, message, noticeList) in
            if result == .failure{
                self.notif(withTitle: message)
                return
            }
            for notice in noticeList{
                self.noticeList.append(notice)
                self.stingArr.append(notice.time!)
            }
            self.endReflesh(noticeList.count<20 ? false : true)
            self.tableView.reloadData()

        }
        
    }
    
    func endReflesh(_ hasMore:Bool){
        if self.tableView.mj_header.isRefreshing{
            self.tableView.mj_header.endRefreshing()
            if !hasMore{
                notif(withTitle: "没有更多数据了")
            }
        }
    }
    
    //MARK:- 为tableview 添加头尾刷新
    func addHeadFooter(){
        let header = CKCylinderReversibleHeader.init {
            self.page += 1
            self.getMianData(self.page)
        }
        header?.cylinderColor = UIColor.subSubWord
        tableView.mj_header = header
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Table view data source
    override func numberOfSections(in tableView: UITableView) -> Int {
        
        return 1
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        var contain = false
        if indexPath.row == 0{
            return 290
        }else{
            for i in  0..<indexPath.row{
                if i < stingArr.count - 1{
                    if stingArr[i] == stingArr[indexPath.row]{
                        contain = true
                    }
                }
            }
            if contain {
                return 235
            }else{
                return 290
            }
        }
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return self.noticeList.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "noticeTableViewCell", for: indexPath)as!noticeTableViewCell
        var contain = false
        if indexPath.row == 0{
            contain = false
        }else{
            for i in  0..<indexPath.row{
                if stingArr[i] == stingArr[indexPath.row]{
                    contain = true
                }
            }
        }
        cell.delegate = self
        cell.configView(noticeList[indexPath.row], !contain, indexPath.row)
        return cell
    }
    
    
}
extension remainedTableViewController : noticeTableViewCellDelegate{
    func buttonClick(_ row: Int) {
        let notice = self.noticeList[row]
        if notice.isBeginning{
            DataManager.share().cancelNotice(withNoticeId:Int(notice.id), closure: { (result, message) in
                if result == .failure{
                    self.notif(withTitle: message)
                    return
                }
                self.noticeList[row].isOperated = true
                self.tableView.reloadRows(at: [IndexPath.init(row: row, section: 0)], with: .none)
            })
        }else{
            
        }
    }
    
    func cellClick(_ row: Int) {
        //跳转详情界面
    }
    
    
    
    
}
