//
//  EventBeginningVC.swift
//  Remind
//
//  Created by gg on 13/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
class EventBeginningVC: UIViewController {
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    //本地数据
    private let localList: [[(FrequencyCycle, Int)]] = [
        [(FrequencyCycle.none, 0)],
        [(.minute, 5), (.minute, 10), (.minute, 15), (.minute, 30),
        (.hour, 1), (.hour, 2), (.hour, 3), (.hour, 5),
        (.day, 1), (.day, 2), (.day, 3),
        (.week, 1), (.week, 2), (.week, 3),
        (.month, 1), (.month, 2), (.month, 3)]
    ]
    
    var beginningModel: BeginningModel?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        config()
        createContents()
        
        self.view.backgroundColor = UIColor.separator
        self.collectionView.backgroundColor = UIColor.separator
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        let item1 = BarButtonItem(textStr: "返回", imageName: "navbar_icon_back", tSelector: #selector(backToPrevious))
        self.navigationItem.leftBarButtonItems = customItemsPosition(items: [item1], position: .left)
        let item = BarButtonItem(textStr: "确定", tSelector: #selector(save(_:)))
        self.navigationItem.rightBarButtonItems = customItemsPosition(items: [item], position: .right)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        if let indexPaths = collectionView.indexPathsForSelectedItems{
            for indexPath in indexPaths{
                collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .bottom)
            }
        }
        
        //仅判断无选择时，默认选择无预提醒项
        if let list = beginningModel?.list{
            if list.isEmpty{
                let indexPath = IndexPath(row: 0, section: 0)
                collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .bottom)
            }
        }
    }

    private func config(){
        
        automaticallyAdjustsScrollViewInsets = false
        
        collectionView.allowsMultipleSelection = true
        
        navigationItem.rightBarButtonItem?.tintColor = .confirm
    }
    
    private func createContents(){
        
    }
    
    @objc func save(_ sender: UIBarButtonItem){
        
        let newBeginningModel = BeginningModel()
        newBeginningModel.list.removeAll()
        if let indexPaths = collectionView.indexPathsForSelectedItems?.filter({$0.section != 0}){
            for indexPath in indexPaths{
                let localTuple = localList[indexPath.section][indexPath.row]
                
                //如果有选择无预提醒项，清空所有
                if localTuple.0 == FrequencyCycle.none{
                    newBeginningModel.list.removeAll()
                    break
                }
                newBeginningModel.list.append(localTuple)
            }
        }
        if let viewControllers = navigationController?.viewControllers{
            if let parentVC = viewControllers[viewControllers.count - 2] as? EventEditorVC{
                parentVC.eventBeginning = newBeginningModel
            }else if let parentVC = viewControllers[viewControllers.count - 2] as? CardSettingViewController{
                parentVC.eventBeginningModel = newBeginningModel
            }
        }
        navigationController?.popViewController(animated: true)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        
    }
}

extension EventBeginningVC: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return localList.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return localList[section].count
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        if section == 0 {
            return CGSize.init(width: view.width, height: 12)
        }
        return CGSize.init(width: view.width, height: 10)
    }
    
    //MARK:- cell
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let row = indexPath.row
        let identifier = "cell"
        let tuple = localList[indexPath.section][row]
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as! EventBeginningCell
        cell.tuple = tuple
        
//        if indexPath.section == 0 && indexPath.row == 0 {
//            cell.customDraw(withTopCornerRadius: true, withBottomCornerRadius: true)
//        }else if indexPath.section == 1 && indexPath.row == 0 {
//            cell.customDraw(withTopCornerRadius: true, withBottomCornerRadius: false)
//        }else if indexPath.section == 1 && indexPath.row == localList[1].count - 1 {
//            cell.customDraw(withTopCornerRadius: false, withBottomCornerRadius: true)
//        }else{
            cell.customOriginDraw()
//        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let row = indexPath.row
        let tuple = localList[indexPath.section][row]
        
        if let list = beginningModel?.list{
            let existList = list.filter{$0 == tuple}
            if !existList.isEmpty{
                collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .bottom)
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool {
        return false
    }
    
    //flow layout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        //返回等同于窗口大小的尺寸
//        let width = indexPath.row == 0 ? view.frame.width - 4 * 2 : (view.frame.width - 4 * 4) / 3
        return CGSize(width: view.width, height: 55)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 1 / UIScreen.main.scale
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    //delegate
    func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool {
        let row = indexPath.row
        if row >= localList[indexPath.section].count {
            return false
        }
        return true
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let row = indexPath.row
        if row < localList[indexPath.section].count{
            if indexPath.section == 0, let items = collectionView.indexPathsForSelectedItems{
                
                let otherItemsWithoutFirst = items.filter{$0 != indexPath}
                for item in otherItemsWithoutFirst{
                    collectionView.deselectItem(at: item, animated: true)
                }
                
            }else{
                let firstIndexPath = IndexPath(row: 0, section: 0)
                collectionView.deselectItem(at: firstIndexPath, animated: true)
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool {
        return true
    }
}
