//
//  MemberActionSheetView.swift
//  Remind
//
//  Created by dong on 2018/1/8.
//  Copyright © 2018年 ganyi. All rights reserved.
//

import UIKit
import SnapKit

final class MemberActionSheetView: UIView {

    fileprivate var action: ((_ index: Int) -> Void)?

    fileprivate let cancelButton = UIButton()

    init() {
        super.init(frame: CGRect.zero)
        backgroundColor = UIColor(colorHex: 0xeeeeee, alpha: 1)

        cancelButton.backgroundColor = .white
        cancelButton.titleLabel?.font = UIFont.systemFont(ofSize: 16)
        cancelButton.setTitle("取消", for: .normal)
        cancelButton.setTitleColor(UIColor.subWord, for: .normal)
        if UIScreen.main.bounds.height == 812 {
            cancelButton.contentEdgeInsets = UIEdgeInsets(top: -15, left: 0, bottom: 0, right: 0)
        }
        cancelButton.addTarget(self, action: #selector(dismiss), for: .touchUpInside)
        addSubview(cancelButton)
        cancelButton.snp.makeConstraints { (make) in
            if UIScreen.main.bounds.height == 812 {
                make.height.equalTo(83)
            } else {
                make.height.equalTo(46)
            }
            make.leading.trailing.bottom.equalToSuperview()
        }
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    static func show(window: UIWindow, titles: [String], _ action: @escaping (_ index: Int) -> Void) {
        let loginTypeView = MemberActionSheetView()
        loginTypeView.action = action
        loginTypeView.addActions(titles: titles)

        let maskView = UIButton(frame: UIScreen.main.bounds)
        maskView.backgroundColor = .clear
        maskView.addTarget(loginTypeView, action: #selector(dismiss), for: .touchUpInside)
        maskView.addSubview(loginTypeView)
        loginTypeView.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.top.equalToSuperview().offset(UIScreen.main.bounds.height)
        }
        
        window.addSubview(maskView)
        maskView.layoutIfNeeded()
        loginTypeView.snp.updateConstraints { (make) in
            make.top.equalToSuperview().offset(UIScreen.main.bounds.height - loginTypeView.frame.height)

        }
        UIView.animate(withDuration: 0.3) {
            maskView.layoutIfNeeded()
            maskView.backgroundColor = UIColor(white: 0, alpha: 0.3)
        }
    }

    fileprivate func addActions(titles: [String]) {
        titles.enumerated().forEach { (index, title) in
            let button = UIButton()
            button.backgroundColor = .white
            button.titleLabel?.font = UIFont.systemFont(ofSize: 16)
            button.setTitle(title, for: .normal)
            button.setTitleColor(UIColor.word, for: .normal)
            button.addTarget(self, action: #selector(click), for: .touchUpInside)
            button.tag = index
            addSubview(button)
            button.snp.makeConstraints { (make) in
                make.height.equalTo(46)
                make.leading.trailing.equalToSuperview()
                if index == 0 {
                    make.top.equalToSuperview()
                } else {
                    let preView = subviews.dropLast().last!
                    make.top.equalTo(preView.snp.bottom).offset(0.5)
                }

                if index == (titles.count - 1) {
                    make.bottom.equalTo(cancelButton.snp.top).offset(-6)
                }
            }
        }
    }

    @objc fileprivate func click(button: UIButton) {
        action?(button.tag)
        dismiss()
    }

    @objc fileprivate func dismiss() {
        snp.updateConstraints { (make) in
            make.top.equalToSuperview().offset(UIScreen.main.bounds.height)
        }
        UIView.animate(withDuration: 0.3, animations: {
            self.superview?.layoutIfNeeded()
            self.superview?.backgroundColor = .clear
        }) { (_) in
            self.superview?.removeFromSuperview()
            self.removeFromSuperview()
        }
    }

}
