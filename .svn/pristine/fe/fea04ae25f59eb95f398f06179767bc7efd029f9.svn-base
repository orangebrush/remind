//
//  detailHeaderView.swift
//  Remind
//
//  Created by zxd on 2017/12/19.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit
/// 详情的头部视图================================================================
protocol detailHeaderDelegate:class {
    func switchvalueChange(_ ison:Bool)
}
class detailHeaderView: UIView {
    weak var delegate : detailHeaderDelegate?
    fileprivate lazy var nameLable : UILabel = {
       let label = UILabel.init(frame: CGRect.zero)
        label.font = UIFont.content
        label.textColor = UIColor.subSubWord
        return label
    }()
    fileprivate lazy var swith : UISwitch = {
       let swith = UISwitch.init(frame: .zero)
        swith.backgroundColor = UIColor.subSubWord
        swith.tintColor = UIColor.subSubWord
        return swith
    }()
    fileprivate lazy var activity = UIActivityIndicatorView.init(activityIndicatorStyle: .gray)
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.addSubview(nameLable)
        self.addSubview(swith)
        self.addSubview(activity)
        nameLable.snp.makeConstraints { (make) in
            make.left.equalTo(15)
            make.top.bottom.equalTo(0)
            make.right.equalTo(-60)
        }
        swith.snp.makeConstraints { (make) in
            make.right.equalTo(-15)
            make.centerY.equalToSuperview()
        }
        activity.snp.makeConstraints { (make) in
            make.center.equalTo(swith.snp.center)
            make.width.height.equalTo(20)
        }
        activity.isHidden = true
        swith.transform = CGAffineTransform.init(scaleX: 0.6, y: 0.6)
        
        swith.clipsToBounds = true
        swith.layer.cornerRadius = swith.bounds.height/2.0
        swith.addTarget(self, action: #selector(detailHeaderView.swithChange(_:)), for: .valueChanged)
        NotificationCenter.default.addObserver(self, selector: #selector(detailHeaderView.updateView(_:)), name: NSNotification.Name(rawValue: String.switchValueChange), object: nil)
    }
    @objc func swithChange(_ switch1:UISwitch){
        swith.isHidden = true
        activity.isHidden = false
        activity.startAnimating()
        delegate?.switchvalueChange(switch1.isOn)
    }
    
    @objc func updateView(_ notif:Notification){
        if   notif.userInfo!["code"] as! Int  == 0{
            activity.isHidden = true
            swith.isHidden = false
            swith.isOn = !swith.isOn
        }else{
            
            activity.isHidden = true
            swith.isHidden = false
        }
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    func configView(_ event:Event){
        nameLable.text = event.typeName ?? ""
        if event.status == 0{
            swith.isOn = true
        }else{
            swith.isOn = false
        }
       
    }
    
    
}
/// 详情的尾部视图================================================================
protocol detailFooterViewDelegate:class  {
    func solveBtnClick()
    func edtingBtnClick()
}
class detailFooterView: UIView {
    weak var delegate : detailFooterViewDelegate?
    fileprivate lazy var cutLabel1 : UILabel = {
       let label = UILabel.init()
       label.backgroundColor = UIColor.separator
        return label
    }()
    fileprivate lazy var cutLabel2 : UILabel = {
        let label = UILabel.init()
        label.backgroundColor = UIColor.separator
        return label
    }()
    fileprivate lazy var cutLabel3 : UILabel = {
        let label = UILabel.init()
        label.backgroundColor = UIColor.separator
        return label
    }()
    fileprivate lazy var remainLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.subSubWord
        label.textAlignment = .center
        label.font = UIFont.normal
        return label
    }()
    fileprivate lazy var solveBtn : UIButton = {
       let btn = UIButton.init(type: .custom)
        btn.setTitle("标记为已办理", for: .normal)
        btn.addTarget(self, action: #selector(detailFooterView.solveBtnlick), for: .touchUpInside)
        btn.setTitleColor(UIColor.word, for: .normal)
        btn.titleLabel?.font = UIFont.normal
        return btn
    }()
    fileprivate lazy var edtingBtn : UIButton = {
        let btn = UIButton.init(type: .custom)
        btn.setTitle("编辑", for: .normal)
        btn.addTarget(self, action: #selector(detailFooterView.edtingBtnClick), for: .touchUpInside)
        btn.setTitleColor(UIColor.edting, for: .normal)
        btn.titleLabel?.font = UIFont.normal
        return btn
    }()
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.addSubview(cutLabel1)
        self.addSubview(cutLabel2)
        self.addSubview(solveBtn)
        self.addSubview(edtingBtn)
        self.addSubview(cutLabel3)
        self.addSubview(remainLabel)
        
        cutLabel3.snp.makeConstraints { (make) in
            make.right.top.equalTo(0)
            make.left.equalTo(15)
            make.height.equalTo(1)
        }
        
       remainLabel.snp.makeConstraints { (make) in
            make.left.right.equalTo(0)
            make.top.equalTo(cutLabel3.snp.bottom)
            make.height.equalTo(55)
        }
        
        cutLabel1.snp.makeConstraints { (make) in
            make.left.right.equalTo(0)
            make.top.equalTo(remainLabel.snp.bottom)
            make.height.equalTo(1)
        }
        cutLabel2.snp.makeConstraints { (make) in
            make.centerX.equalToSuperview()
            make.bottom.equalTo(0)
            make.top.equalTo(remainLabel.snp.bottom)
            make.width.equalTo(1)
        }
        solveBtn.snp.makeConstraints { (make) in
            make.left.bottom.equalTo(0)
            make.top.equalTo(cutLabel1.snp.bottom)
            make.width.equalTo(frame.size.width/2)
            make.height.equalTo(45)
        }
        edtingBtn.snp.makeConstraints { (make) in
            make.width.height.equalTo(solveBtn)
            make.right.bottom.equalTo(0)
            make.top.equalTo(cutLabel1.snp.bottom)
        }
    }
    func configView(_ event:Event){
        remainLabel.text = event.remindText ?? ""
       if event.remindStatus == 0{
            solveBtn.setTitle("标记为已办理", for: .normal)
            solveBtn.setTitleColor(UIColor.word, for: .normal)
            solveBtn.isEnabled = true
       }else {
        solveBtn.setTitle("标记为已办理", for: .normal)
        solveBtn.setTitleColor(UIColor.grayBtn, for: .normal)
        solveBtn.isEnabled = false
        }
        
    }
   @objc func solveBtnlick(){
        delegate?.solveBtnClick()
    }
   @objc func edtingBtnClick(){
        delegate?.edtingBtnClick()
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}
///表头视图=======================================================================
protocol detailTableHeaderDelegate : class{
    func detailTableHeaderClick()
}
class detailTableHeader: UIView {
    weak var delegate : detailTableHeaderDelegate?
    fileprivate lazy var nameLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.word
        label.font = UIFont.normal
        label.numberOfLines = 0
        return label
    }()
    fileprivate lazy var timeLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.subSubWord
        label.font = UIFont.content
        return label
    }()
    fileprivate lazy var afterDayLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.subSubWord
        label.font = UIFont.content
        label.textAlignment = .right
        return label
    }()
    fileprivate lazy var  cutDayLabel: UILabel = {
        let label = UILabel.init()
        label.backgroundColor = UIColor.separator
        return label
    }()
    fileprivate lazy var brithTimeLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.word
        label.font = UIFont.normal
        return label
    }()
    fileprivate lazy var zodiacLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.word
        label.font = UIFont.normal
        return label
    }()
    fileprivate lazy var brithLabel : UILabel = {
        let label = UILabel.init()
        label.textColor = UIColor.subSubWord
        label.font = UIFont.content
        return label
    }()
    fileprivate lazy var detailImageView : UIImageView = {
        let img = UIImageView.init(image: #imageLiteral(resourceName: "go_detail"))
        return img
    }()
    fileprivate lazy var cutDayLabel1 : UILabel = {
        let label = UILabel.init()
        label.backgroundColor = UIColor.separator
        return label
    }()
    fileprivate lazy var btn : UIButton = {
        let btn = UIButton.init(type: .custom)
        btn.addTarget(self, action: #selector(detailTableHeader.buttonClick), for: .touchUpInside)
        return btn
    }()
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.addSubview(nameLabel)
        self.addSubview(timeLabel)
        self.addSubview(afterDayLabel)
        self.addSubview(cutDayLabel)
        self.addSubview(cutDayLabel1)
        self.addSubview(brithLabel)
        self.addSubview(brithTimeLabel)
        self.addSubview(zodiacLabel)
        self.addSubview(detailImageView)
        self.addSubview(btn)
    }
    func configView(_ event:Event){
        var text =  ""
        var text1 = ""
        if event.type == Int32(1) {
            brithTimeLabel.isHidden = false
            brithTimeLabel.isHidden = false
            cutDayLabel1.isHidden = false
            zodiacLabel.isHidden = false
            detailImageView.isHidden = false
            text = "\(event.introduce ?? "")·" + event.intervalDay.intervalDayText() + "\(event.age)周岁"
            text1 = "\(event.time ?? "")"

        }else{
            brithTimeLabel.isHidden = true
            brithTimeLabel.isHidden = true
            cutDayLabel1.isHidden = true
            zodiacLabel.isHidden = true
            detailImageView.isHidden = true
            text =  event.introduce ?? ""
            text1 = event.time ?? ""
        }
        nameLabel.text = text
        nameLabel.snp.makeConstraints { (make) in
            make.left.equalTo(15)
            make.right.equalTo(-15)
            make.top.equalTo(18)
            make.height.equalTo(text.computationString(self.frame.size.width-30, UIFont.normal, text)+2)
        }
        timeLabel.snp.makeConstraints { (make) in
            make.left.equalTo(15)
            make.bottom.equalTo(cutDayLabel.snp.top).offset(-20)
            make.height.equalTo(((event.time ?? "1").computationString(self.frame.size.width-30, UIFont.content, event.time!)))
            make.right.equalTo(afterDayLabel.snp.left).offset(-5)
        }
        timeLabel.text = text1
        
        afterDayLabel.snp.makeConstraints { (make) in
            make.right.equalTo(-15)
            make.width.equalTo((event.intervalDay.intervalDayText()).computationStringWidth(UIFont.normal, 5, 0).0)
            make.height.equalTo(timeLabel)
            make.centerY.equalTo(timeLabel)
        }
        afterDayLabel.text = event.intervalDay.intervalDayText()
        if event.type == Int32(1){
            cutDayLabel.snp.makeConstraints { (make) in
                make.left.equalTo(15)
                make.right.equalTo(0)
                make.bottom.equalTo(-100)
                make.height.equalTo(1)
            }
        }else{
            cutDayLabel.snp.makeConstraints { (make) in
                make.left.equalTo(15)
                make.right.bottom.equalTo(0)
                make.height.equalTo(1)
            }
        }
       
        
        if event.type == 1{
            
            brithLabel.snp.makeConstraints({ (make) in
                make.left.equalTo(nameLabel)
                make.top.equalTo(cutDayLabel.snp.bottom).offset(20)
                make.right.equalTo(detailImageView.snp.right).offset(-5)
            })
            brithLabel.text = "生日详情"
            brithTimeLabel.snp.makeConstraints({ (make) in
                make.left.equalTo(nameLabel)
                make.top.equalTo(brithLabel.snp.bottom)
                make.height.width.equalTo(brithTimeLabel)
            })
            brithTimeLabel.text = "\((event.beginDate ?? Date()).formatString(with: "yyyy年MM月dd日 EE")) (\(event.lunarYear ?? ""))"
            zodiacLabel.snp.makeConstraints({ (make) in
                make.left.equalTo(nameLabel)
                make.width.height.equalTo(brithTimeLabel)
                make.top.equalTo(brithTimeLabel.snp.bottom)
                make.bottom.equalTo(-20)
            })
            zodiacLabel.text = "\(event.zodiac ?? "")·\(event.constellation ?? "")"
            cutDayLabel1.snp.makeConstraints({ (make) in
                make.left.equalTo(nameLabel)
                make.height.equalTo(1)
                make.right.bottom.equalTo(0)
            })
            detailImageView.snp.makeConstraints({ (make) in
                make.right.equalTo(-15)
                make.width.equalTo(6)
                make.height.equalTo(12)
                make.bottom.equalTo(-44)
            })
            
            btn.snp.makeConstraints({ (make) in
                make.left.right.equalTo(0)
                make.top.equalTo(cutDayLabel.snp.bottom)
                make.bottom.equalTo(0)
            })
            
        }
        
    }
   @objc func buttonClick(){
       delegate?.detailTableHeaderClick()
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}






