//
//  ZXDSlider.swift
//  Remind
//
//  Created by zxd on 2017/12/8.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit
protocol slidervalueChangeDelegate : class {
    func sliderValuechange(_ color:UIColor)
    func hueValueChange(_ color:UIColor)
}

class ZXDSlider: UISlider {
    
    weak var delegate : slidervalueChangeDelegate?
    fileprivate var sliderImageView : UIImageView!
    override init(frame: CGRect) {
        super.init(frame: frame)
        sliderImageView = UIImageView.init()
        sliderImageView.bounds = CGRect.init(x: 0, y: 0, width: frame.size.width, height: 6)
        sliderImageView.center = CGPoint.init(x: 110, y: 20)
        sliderImageView.image = #imageLiteral(resourceName: "skin_colors_slider")
        self.setThumbImage(#imageLiteral(resourceName: "skin_colors_slider_circle"), for: .normal)
        self.maximumTrackTintColor = UIColor.clear
        self.tintColor = UIColor.clear
    
        self.clipsToBounds = true
        self.addSubview(sliderImageView)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {
        super.beginTracking(touch, with: event)
        return true
    }
    override func continueTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {
        super.continueTracking(touch, with: event)
        let point = touch.location(in: self)
        let hue = solveLinearequation(Double(point.x), 90, Double(self.frame.size.width), 0, 1)
        let s = solveLinearequation(Double(point.x), 30, 75, 0, 1)
        let b = solveLinearequation(Double(point.x), 0, 30, 0, 1)
        let color = UIColor.init(hue: CGFloat(hue), saturation: CGFloat(s), brightness: CGFloat(b), alpha: 1)
        delegate?.sliderValuechange(color)
        return true
    }
    
    func projectNormal(_ n : Double,_ start:Double, _ end:Double) -> Double{
        return start + (n*(end-start))
    }
    func nomalize(_ value:Double,_ startValue:Double,_ endValue:Double) ->Double{
        return (value-startValue)/(endValue-startValue)
    }
    func solveLinearequation(_ input:Double,_ startValue:Double,_ endValue:Double,_ outputStart:Double,_ outputEnd:Double)->Double{
        return projectNormal(max(0, min(1, nomalize(input, startValue, endValue))), outputStart, outputEnd)
    }
    
}
class AlaphSlider: UISlider {
    
    weak var delegate : slidervalueChangeDelegate?
    fileprivate var sliderImageView : UIImageView!
    override init(frame: CGRect) {
        super.init(frame: frame)
        sliderImageView = UIImageView.init()
        sliderImageView.bounds = CGRect.init(x: 0, y: 0, width: frame.size.width, height: 6)
        sliderImageView.center = CGPoint.init(x: 110, y: 20)
        sliderImageView.image = #imageLiteral(resourceName: "skin_saturation_slider")
        self.setThumbImage(#imageLiteral(resourceName: "skin_colors_slider_circle"), for: .normal)
        self.maximumTrackTintColor = UIColor.clear
        self.tintColor = UIColor.clear
        
        self.clipsToBounds = true
        self.addSubview(sliderImageView)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {
        super.beginTracking(touch, with: event)
        return true
    }
    override func continueTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {
        super.continueTracking(touch, with: event)
        let point = touch.location(in: self)
        let hue = solveLinearequation(Double(point.x), 90, Double(self.frame.size.width), 0, 1)
        let s = solveLinearequation(Double(point.x), 30, 75, 0, 1)
        let b = solveLinearequation(Double(point.x), 0, 30, 0, 1)
        let color = UIColor.init(hue: CGFloat(hue), saturation: CGFloat(s), brightness: CGFloat(b), alpha: 1)
        delegate?.hueValueChange(color)
        return true
    }
    
    func projectNormal(_ n : Double,_ start:Double, _ end:Double) -> Double{
        return start + (n*(end-start))
    }
    func nomalize(_ value:Double,_ startValue:Double,_ endValue:Double) ->Double{
        return (value-startValue)/(endValue-startValue)
    }
    func solveLinearequation(_ input:Double,_ startValue:Double,_ endValue:Double,_ outputStart:Double,_ outputEnd:Double)->Double{
        return projectNormal(max(0, min(1, nomalize(input, startValue, endValue))), outputStart, outputEnd)
    }
    
}

