//
//  LocalTableViewCell.swift
//  Remind
//
//  Created by zxd on 2017/12/14.
//  Copyright © 2017年 ganyi. All rights reserved.
//

import UIKit

class LocalTableViewCell: UITableViewCell {

    fileprivate lazy var iconImageView = UIImageView()
    fileprivate lazy var nameLable : UILabel = {
        let lable = UILabel.init()
        lable.font =  UIFont.normal
        lable.textColor = UIColor.word
        return lable
    }()
    fileprivate lazy var timeLabel: UILabel = {
        let lable = UILabel.init()
        lable.font = UIFont.content
        lable.textColor = UIColor.subSubWord
        return lable
    }()
    fileprivate lazy var rightLabel: UILabel = {
        let lable = UILabel.init()
        lable.font = UIFont.init(withNormalFontSize: 13)
        lable.textAlignment = .right
        lable.textColor = UIColor.subSubWord
        return lable
    }()
    fileprivate lazy var mainBackView:UIView = {
        let view = UIView.init()
        view.backgroundColor = UIColor.white
        return view
    }()
    fileprivate lazy var BackView:UIView = {
        let view = UIView.init()
        view.backgroundColor = UIColor.header
        return view
    }()
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        self.selectionStyle = .none
        self.backgroundColor = UIColor.clear
        BackView.frame = CGRect.init(x: 10, y: 0, width: keyDeviceWidth-20, height:
            64)
        self.addSubview(BackView)
        mainBackView.frame = CGRect.init(x: 10, y: 0, width: keyDeviceWidth-20, height:
            64)
        self.addSubview(mainBackView)
        mainBackView.addSubview(iconImageView)
        mainBackView.addSubview(nameLable)
        mainBackView.addSubview(timeLabel)
        mainBackView.addSubview(rightLabel)
        
        iconImageView.snp.makeConstraints { (make) in
            make.left.equalTo(15)
            make.centerY.equalToSuperview()
            make.width.height.equalTo(34)
        }
        nameLable.snp.makeConstraints { (make) in
            make.top.equalTo(12)
            make.left.equalTo(iconImageView.snp.right).offset(15)
            make.right.equalTo(-15)
            make.height.equalTo(21)
        }
        timeLabel.snp.makeConstraints { (make) in
            make.top.equalTo(nameLable.snp.bottom)
            make.width.left.equalTo(nameLable)
            make.height.equalTo(19)
            
        }
        rightLabel.snp.makeConstraints { (make) in
            make.top.equalTo(12)
            make.height.equalTo(nameLable)
            make.right.equalTo(-15)
        }
    }
    func configCell(_ event:EventClient){
        mainBackView.drawFourRectView()
        BackView.drawRectView()
        
        iconImageView.image = UIImage(named:"eventClient_\(event.type)")
        nameLable.text = event.name
        
        //转换数据库模型数据
        let times = DataManager.share().getTimes(fromEventClientTimes: event.timesList)
        timeLabel.text = times?.encoderTimes()
        
        if event.status == 1 || event.status == 2{
            iconImageView.alpha = 0.4
            nameLable.textColor = UIColor.grayBtn
            timeLabel.textColor = UIColor.grayBtn
            rightLabel.textColor = UIColor.grayBtn
            rightLabel.text = event.status == 1 ? "已关闭" : "已结束"
        }else{
            nameLable.textColor = UIColor.word
            timeLabel.textColor = UIColor.subSubWord
            rightLabel.textColor = UIColor.subSubWord
            rightLabel.text = ""
            iconImageView.alpha = 1
        }
        
        
//        //获取所有提醒时间数组
//        var eventClientTimesList = [EventClientTimes]()
//        if let timesList = event.timesList{
//            for element in timesList{
//                guard let ecTimes = element as? EventClientTimes else{
//                    continue
//                }
//                eventClientTimesList.append(ecTimes)
//            }
//        }
//        let componets = Calendar.current.dateComponents([.hour, .minute], from: Date())
//        let hour = componets.hour ?? 0
//        let minute = componets.minute ?? 0
//        let sortedEventClientTimesList = eventClientTimesList.sorted{($0.hour * 100 + $0.minute) < ($1.hour * 100 + $1.minute)}
//        let filterList = sortedEventClientTimesList.filter { (times) -> Bool in
//            return Int(times.hour * 100 + times.minute) > (hour * 100 + minute)
//        }
//        //获取最近提醒时间
//
//        if event.status == 1{
//            remindLabel.text = "事件已暂停"
//        }else{
//            if let nearliestTimes = filterList.first{
//
//                remindLabel.text = nearliestTimes.minute<10 ? "下次提醒时间: \(nearliestTimes.hour): 0\(nearliestTimes.minute)": "下次提醒时间: \(nearliestTimes.hour):\(nearliestTimes.minute)"
//            }else if let nearliestTimes = sortedEventClientTimesList.first{
//
//                remindLabel.text = nearliestTimes.minute<10 ? "下次提醒时间:\(nearliestTimes.hour):0\(nearliestTimes.minute)" : "下次提醒时间: \(nearliestTimes.hour):\(nearliestTimes.minute)"
//            }else{
//                remindLabel.text = "无提醒时间"
//            }
//        }
        
       
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }

}
