//
//  GANDatePicker.swift
//  Remind
//
//  Created by gg on 02/01/2018.
//  Copyright © 2018 ganyi. All rights reserved.
//

import Foundation
class GANDatePicker: UIPickerView {
    
    ///最小日期（必须）
    var minDate: Date!
    ///最大日期（必须）
    var maxDate: Date!
    
    ///默认选择日期（必须）
    var selectedDate = Date() {
        didSet{
            reloadAllComponents()
            initSelectedDate()
        }
    }
    
    var selectedClosure: ((Date)->())?
    
    //private---------------------------------------------------------------------------
    private lazy var componentWidth: CGFloat! = {
        return self.frame.width / 3
    }()
    private let componentHeight: CGFloat = 55
    private lazy var yearLabel: UILabel! = {
        let frame = CGRect(x: componentWidth * 0.6, y: (self.frame.height - componentHeight) / 2 + (17 - 9) / 4, width: 21, height: componentHeight)
        let label = UILabel(frame: frame)
        label.backgroundColor = .clear
        label.font = UIFont(withNormalFontSize: 9)
        label.textColor = UIColor(colorHex: 0x333333)
        label.text = "年"
        return label
    }()
    
    private lazy var monthLabel: UILabel! = {
        let frame = CGRect(x: componentWidth * 0.55 + componentWidth, y: (self.frame.height - componentHeight) / 2 + (17 - 9) / 4, width: 21, height: componentHeight)
        let label = UILabel(frame: frame)
        label.backgroundColor = .clear
        label.font = UIFont(withNormalFontSize: 9)
        label.textColor = UIColor(colorHex: 0x333333)
        label.text = "月"
        return label
    }()
    
    fileprivate lazy var dayAndWeekdayLabel: UILabel! = {
        let frame = CGRect(x: componentWidth * 0.45 + componentWidth * 2, y: (self.frame.height - componentHeight) / 2 + (17 - 9) / 4, width: componentWidth / 2, height: componentHeight)
        let label = UILabel(frame: frame)
        label.backgroundColor = .clear
        label.font = UIFont(withNormalFontSize: 9)
        label.textColor = UIColor(colorHex: 0x333333)
        label.text = "日, " + self.selectedDate.weekdayString()
        return label
    }()
    
    //MARK:- init--------------------------------------------------------------------------------------
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        config()
        createContents()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
        
        reloadAllComponents()
        
        initSelectedDate()
    }
    
    //MARK:- 初始化选择日期
    private func initSelectedDate(){
        
        guard minDate != nil, maxDate != nil else {
            return
        }
        
        let minYear = calendar.component(.year, from: minDate)
        let selectedYear = calendar.component(.year, from: selectedDate)
        selectRow(labs(selectedYear - minYear), inComponent: 0, animated: true)
        
        let selectedMonthRow = calendar.component(.month, from: selectedDate)
        selectRow(selectedMonthRow - 1, inComponent: 1, animated: true)
        
        let selectedDayRow = calendar.component(.day, from: selectedDate)
        selectRow(selectedDayRow - 1, inComponent: 2, animated: true)
        
        dayAndWeekdayLabel.text = "日, " + selectedDate.weekdayString()
    }
    
    private func config(){
        
        delegate = self
        dataSource = self
        
        backgroundColor = UIColor.clear //UIColor(colorHex: 0xffffff, alpha: 0.9)
        
        addSubview(yearLabel)
        addSubview(monthLabel)
        addSubview(dayAndWeekdayLabel)
        
        //添加分割线
        for i in 0..<2{
            let vy = CGFloat(i) * componentHeight + (bounds.height - componentHeight) / 2
            let vframe = CGRect(x: 0, y: vy, width: bounds.width, height: 0.5)
            let vsep = UIView(frame: vframe)
            vsep.backgroundColor = UIColor(colorHex: 0xdddddd)
            addSubview(vsep)
            
            let hx = CGFloat(i) * componentWidth + componentWidth
            let hFrame = CGRect(x: hx, y: 0, width: 0.5, height: bounds.height)
            let hSep = UIView(frame: hFrame)
            hSep.backgroundColor = UIColor(colorHex: 0xdddddd)
            addSubview(hSep)
        }
        
//        //添加背景白色
//        let backViewFrame = CGRect(x: 0, y: (bounds.height - componentHeight) / 2, width: bounds.width, height: componentHeight)
//        let backView = UIView(frame: backViewFrame)
//        backView.backgroundColor = .white
//        backView.layer.zPosition = -0.1
//        addSubview(backView)
    }
    
    private func createContents(){
        
    }
}

extension GANDatePicker: UIPickerViewDelegate, UIPickerViewDataSource{
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 3
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        switch component {
        case 0:     //年
            let minYear = calendar.component(.year, from: minDate)
            let maxYear = calendar.component(.year, from: maxDate)
            return labs(maxYear - minYear) + 1
        case 1:     //月
            return 12
        default:
            let days = calendar.range(of: .day, in: .month, for: selectedDate)
            return days?.count ?? 0
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
        //主cell
        let pickerLabel0 = pickerView.view(forRow: row, forComponent: component) as? UILabel
        pickerLabel0?.backgroundColor = .clear
        pickerLabel0?.font = UIFont(withSemiboldFontSize: 17)
        
        let text0: String
        switch component {
        case 0:     //年
            let minYear = calendar.component(.year, from: minDate)
            text0 = "\(minYear + row)  _"
        case 1:     //月
            let month = row + 1
            let monthStr = month < 10 ? "0\(month)" : "\(month)"
            text0 = monthStr + " _"
        default:    //日
            let day = row + 1
            let dayStr = day < 10 ? "0\(day)" : "\(day)"
            text0 = dayStr + "      _"
        }
        let attributedString0 = NSMutableAttributedString(string: text0, attributes: [NSAttributedStringKey.foregroundColor : UIColor(colorHex: 0x333333), NSAttributedStringKey.font: UIFont(withNormalFontSize: 17)])
        attributedString0.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.clear, range: NSMakeRange(text0.count - 1, 1))
        pickerLabel0?.attributedText = attributedString0
        
        
        //其他小cell
        let frame = CGRect(x: 0, y: 0, width: componentWidth, height: componentHeight)
        let pickerLabel = UILabel(frame: frame)
        pickerLabel.font = UIFont(withNormalFontSize: 17)
        pickerLabel.textColor = UIColor(colorHex: 0x333333)
        
        pickerLabel.backgroundColor = .clear
        //pickerLabel.layer.transform = CATransform3DIdentity
        pickerLabel.textAlignment = .center
        
        let text: String
        switch component {
        case 0:     //年
            let minYear = calendar.component(.year, from: minDate)
            text = "\(minYear + row)  _"
        case 1:     //月
            let month = row + 1
            let monthStr = month < 10 ? "0\(month)" : "\(month)"
            text = monthStr + " _"
        default:    //日
            let day = row + 1
            let dayStr = day < 10 ? "0\(day)" : "\(day)"
            text = dayStr + "      _"
        }
        let attributedString = NSMutableAttributedString(string: text, attributes: [NSAttributedStringKey.foregroundColor : UIColor(colorHex: 0x333333), NSAttributedStringKey.font: UIFont(withNormalFontSize: 17)])
        attributedString.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.clear, range: NSMakeRange(text.count - 1, 1))
        pickerLabel.attributedText = attributedString
        pickerLabel.transform = CGAffineTransform.identity
        return pickerLabel
    }
    
    func pickerView(_ pickerView: UIPickerView, rowHeightForComponent component: Int) -> CGFloat {
        return 55
    }
    
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        switch component {
        case 0, 1:
            pickerView.reloadComponent(2)
        default:
            break
        }
        
        //选择回调
        let yearRow = pickerView.selectedRow(inComponent: 0)
        let monthRow = pickerView.selectedRow(inComponent: 1)
        let dayRow = pickerView.selectedRow(inComponent: 2)
        
        let minYear = calendar.component(.year, from: minDate)
        let year = minYear + yearRow
        let month = monthRow + 1
        let day = dayRow + 1
        
        var components = calendar.dateComponents([.year, .month, .day], from: Date())
        components.year = year
        components.month = month
        components.day = day
        guard let selectedDate = calendar.date(from: components)?.GMT() else{
            return
        }
        
        //返回选择事件
        selectedClosure?(selectedDate)
        
        self.selectedDate = selectedDate
        
        //更新星期数
        dayAndWeekdayLabel.text = "日, " + selectedDate.weekdayString()
    }
}
