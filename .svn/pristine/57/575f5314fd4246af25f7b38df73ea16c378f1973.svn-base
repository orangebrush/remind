//
//  EventHomeVC.swift
//  Remind
//
//  Created by gg on 09/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
enum EventHomeTipType {
    case allTip
    case eventTip
    case eventClientTip
}
class EventHomeVC: BasedViewController {
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    
    fileprivate var tipList = [Tip]()
    fileprivate var clientTipList = [Tip]()
    
    ///区分载入类别
    var eventHomeTipType: EventHomeTipType = .allTip
    
    var needReloadDate = false
    
    //MARK:- init-------------------------------------------------------
    override func viewDidLoad() {
        config()
        createContents()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        let item = BarButtonItem(textStr: "",imageName: "navbar_icon_back", tSelector: #selector(backToPrevious))
        self.navigationItem.leftBarButtonItems = customItemsPosition(items: [item], position: .left)
        
    }
    
    override func viewDidAppear(_ animated: Bool) {
        
        navigationItem.title = "添加"
        automaticallyAdjustsScrollViewInsets = true
        collectionView.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0)
        
        if needReloadDate{
            needReloadDate = false
            collectionView.reloadData()
        }
    }
    
    private func config(){
        collectionView.alwaysBounceVertical = true
        collectionView.backgroundColor = .headerBg
        
        //默认添加列表
        self.clientTipList = DataHandler.share().getTips(withIsClient: true)
        collectionView.reloadData()
        
        
        //获取事件Tip列表
        if eventHomeTipType != .eventClientTip{
            let dataManager = DataManager.share()
            dataManager.getAllEventTypeListAndEventClientTypeList(withListType: .all) { (codeResult, message, eventTipList, eventClientTipList) in
                guard codeResult == .success else{
                    self.notif(withTitle: message, closure: nil)
                    return
                }
                
                self.tipList = eventTipList.sorted{$0.sort < $1.sort}
                self.clientTipList = eventClientTipList.sorted{$0.sort < $1.sort}
                
                self.collectionView.reloadData()
            }
        }
    }
    
    private func createContents(){
        
    }
    
}

extension EventHomeVC: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return eventHomeTipType == .allTip ? 2 : 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return section == 0 && eventHomeTipType != .eventClientTip ? tipList.count : clientTipList.count
    }
    
    //MARK:- cell
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let section = indexPath.section
        let row = indexPath.row
        let identifier = "cell"
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as! EventEnumTypeCell
        
        let tip = section == 0 && eventHomeTipType != .eventClientTip ? tipList[row] : clientTipList[row]
        cell.tip = tip
        
        return cell
    }
    
    //MARK:- 头部设置
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        var headerOrFooter: UICollectionReusableView?
        if kind == UICollectionElementKindSectionHeader{
            headerOrFooter = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "header", for: indexPath)
            let header = headerOrFooter as? EventEnumTypeHeader

            let text: String
            if indexPath.section == 0 && eventHomeTipType != .eventClientTip{
                text = "重要事件"
            }else{
                text = "每日提醒 (除自定义，其他提醒仅可创建1次)"
            }            
            let attributedString = NSMutableAttributedString(string: text, attributes: [NSAttributedStringKey.font : UIFont(withThinFontSize: 13), NSAttributedStringKey.foregroundColor: UIColor.subWord])
            attributedString.addAttributes([NSAttributedStringKey.foregroundColor: UIColor.word], range: NSMakeRange(0, 4))
            header?.titleLabel.attributedText = attributedString
        }else{
            headerOrFooter = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionFooter, withReuseIdentifier: "footer", for: indexPath)
        }
        return headerOrFooter!
    }
    
    func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool {
        return false
    }
    
    //flow layout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        //返回等同于窗口大小的尺寸
        let width = (view.frame.width - 10 * 2 - 9) / 2
        return CGSize(width: width, height: 56)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)
    }
    
    
    //MARK:- header大小
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: view_size.width, height: 60)
    }
    
    //MARK:- footer大小
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        if section == 0 {
            return CGSize(width: view_size.width, height: 1)
        }
        return CGSize(width: view_size.width, height: 60)
    }
    
    //MARK:- cell间隔高度
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 9
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    //delegate
    func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool {
        let section = indexPath.section
        let row = indexPath.row

        let count = section == 0 ? tipList.count : clientTipList.count
        if row >= count {
            return false
        }
        return true
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let section = indexPath.section
        let row = indexPath.row
        
        if section == 0 && eventHomeTipType != .eventClientTip{
            if row < tipList.count{
                //选择回调
                let cell = collectionView.cellForItem(at: indexPath) as! EventEnumTypeCell
                if let eventEditorNavigation = storyboard?.instantiateViewController(withIdentifier: "editor") as? UINavigationController{
                    if let eventEditorVC = eventEditorNavigation.viewControllers.first as? EventEditorVC{
                        eventEditorVC.tip = cell.tip
                        navigationController?.show(eventEditorVC, sender: nil)
                    }
                    //present(eventEditorNavigation, animated: true, completion: nil)
                }
            }
        }else{
            if row < clientTipList.count{
                //选择回调
                let cell = collectionView.cellForItem(at: indexPath) as! EventEnumTypeCell
                
                //判断是否有创建过该提醒
                if DataHandler.share().isExistEventClient(withEventClientType: Int(cell.tip!.type)){
                    if let name = cell.tip?.name{
                        notif(withTitle: "已创建过" + name)
                    }
                    return
                }
                
                //载入编辑页面
                if let eventEditorNavigation = storyboard?.instantiateViewController(withIdentifier: "editor") as? UINavigationController{                    
                    if let eventEditorVC = eventEditorNavigation.viewControllers.first as? EventEditorVC{
                        eventEditorVC.tip = cell.tip
                        navigationController?.show(eventEditorVC, sender: nil)
                    }
                    //present(eventEditorNavigation, animated: true, completion: nil)
                }
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool {
        return true
    }
}
