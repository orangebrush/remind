//
//  GANCalendarCell.swift
//  Remind
//
//  Created by gg on 24/01/2018.
//  Copyright © 2018 ganyi. All rights reserved.
//

import Foundation
class GANCalendarCell: UITableViewCell {
    
    private var collectionView: GANCollectionView?
    
    
    //MARK:- public----------------------------------------------------------------------------
    var closure: ((Date)->())?
    
    var selectedDate: Date?{
        didSet{
            if let selDate = selectedDate{
                year = calendar.component(.year, from: selDate)
                month = calendar.component(.month, from: selDate)
            }
            
            
            collectionView?.reloadData()
            
            
            //始终选择中间section
            if let selDate = selectedDate {
                var startIndex = 0
                
                var components = calendar.dateComponents([.year, .month, .day], from: selDate)
                components.day = 1
                if let beginDate = calendar.date(from: components)?.GMT(){
                    startIndex = beginDate.weekday() - 1
                    if startIndex == 0{
                        startIndex = 6
                    }
                }
                
                
                let row = startIndex - 1 + calendar.component(.day, from: selDate) - 1
                let indexPath = IndexPath(row: row, section: 1)
                collectionView?.selectItem(at: indexPath, animated: true, scrollPosition: .bottom)
                
                //自动滑动到中间位置
                if let scrollView = collectionView{
                    collectionView?.contentOffset = CGPoint(x: scrollView.frame.width, y: 0)
                }
            }
        }
    }
    
    //MARK:- private----------------------------------------------------------------------------
    //中间位置的年月
    fileprivate var year: Int?
    fileprivate var month: Int?
    
    
    
    ///自定义初始化------------------------------------------------
    init(reuseIdentifier: String?) {
        super.init(style: .default, reuseIdentifier: reuseIdentifier)
        
        config()
        createContents()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    //重写 解决初始化frame bug
    override var frame: CGRect{
        set{
            var f = newValue
            f.size.width = view_size.width - .edge10 * 2
            f.size.height = 51 * 5 + 10 * 2 + 3 * 4
            super.frame = f
        }
        get{
            return super.frame
        }
    }
    
    private func config(){
        
    }
    
    private func createContents(){
        
        collectionView = GANCollectionView(frame: bounds)
        collectionView?.delegate = self
        collectionView?.dataSource = self
        addSubview(collectionView!)
    }
}

extension GANCalendarCell: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 3
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        var column = 6
//        if let selDate = selectedDate{
//            var startIndex = selDate.weekday() - 1
//            if startIndex == 0{
//                startIndex = 6
//            }
//
//            //获取当月总天数
//            if let daysOfThisMonthRange = calendar.range(of: .day, in: .month, for: selDate){
//                let daysOfThisMonth = daysOfThisMonthRange.count
//                let temp = CGFloat(daysOfThisMonth + startIndex - 1) / 7
//                column = Int(ceil(temp))
//            }
//        }
        return column * 7
    }
    
    //MARK:- cell
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let section = indexPath.section
        let row = indexPath.row
        let identifier = "cell"
        
        var cell: GANCollectionCell?
        cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as? GANCollectionCell
        if cell == nil {
            let cellFrame = CGRect(x: 0, y: 0, width: 2, height: 3)
            cell = GANCollectionCell(frame: cellFrame)
        }
        
        var components = calendar.dateComponents([.year, .month, .day], from: Date())
        
        //数据
        if section == 0 {       //上个月=================================================================================
            //获取当前选择的上一个月的年月
            components.year = year
            var lastMonth: Int?
            if let m = month{
                if m - 1 == 0{
                    if let y = year{
                        components.year = y - 1
                    }
                    lastMonth = 12
                    components.month = lastMonth
                }else{
                    lastMonth = m - 1
                    components.month = lastMonth
                }
            }
            components.day = 1
            let lastDate = calendar.date(from: components)?.GMT()
            if let lDate = lastDate {
                var startIndex = lDate.weekday() - 1
                if startIndex == 0{
                    startIndex = 6
                }
                
                //获取当月总天数
                var daysOfLastMonth = 0
                if let daysOfLastMonthRange = calendar.range(of: .day, in: .month, for: lDate){
                    daysOfLastMonth = daysOfLastMonthRange.count
                }
                if row < startIndex - 1 {                               //为上上个月数据
                    if let m = lastMonth{
                        if m - 1 == 0{
                            if let y = year{
                                components.year = y - 1
                            }
                            components.month = 12
                        }else{
                            components.month = m - 1
                        }
                        
                        let date = calendar.date(from: components)
                        
                        //获取上上月天数
                        var daysOfLastLastMonth = 0
                        if let d = date, let daysOfLastLastMonthRange = calendar.range(of: .day, in: .month, for: d){
                            daysOfLastLastMonth = daysOfLastLastMonthRange.count
                        }
                        components.day = daysOfLastLastMonth - startIndex + row
                        
                        cell?.date = calendar.date(from: components)
                    }else {
                        cell?.date = nil
                    }
                    cell?.isThisMonth = false
                    cell?.isToday = false
                }else if row > startIndex - 1 + daysOfLastMonth - 1 {    //为这个月数据
                    if let m = lastMonth{
                        if m + 1 > 12{
                            if let y = year{
                                components.year = y + 1
                            }
                            components.month = 1
                        }else{
                            components.month = m + 1
                        }
                        components.day = row - (startIndex - 1) - (daysOfLastMonth - 1)
                        let date = calendar.date(from: components)
                        cell?.date = date
                    }else {
                        cell?.date = nil
                    }
                    cell?.isThisMonth = false
                    cell?.isToday = false
                }else{                                                  //为上个月数据
                    components.day = row - (startIndex - 1) + 1
                    let date = calendar.date(from: components)
                    cell?.date = date
                    cell?.isThisMonth = true
                    cell?.isToday = date?.isToday() ?? false
                }
            }
        }else if section == 1{  //这个月=================================================================================
            //获取当前选择的年月
            var components = calendar.dateComponents([.year, .month, .day], from: Date())
            components.year = year
            components.month = month
            components.day = 1
            let currentDate = calendar.date(from: components)?.GMT()
            if let curDate = currentDate {
                var startIndex = curDate.weekday() - 1
                if startIndex == 0{
                    startIndex = 6
                }
                
                //获取当月总天数
                var daysOfThisMonth = 0
                if let daysOfThisMonthRange = calendar.range(of: .day, in: .month, for: curDate){
                    daysOfThisMonth = daysOfThisMonthRange.count
                }
                if row < startIndex - 1 {                               //为上个月数据
                    if let m = month{
                        if m - 1 == 0{
                            if let y = year{
                                components.year = y - 1
                            }
                            components.month = 12
                        }else{
                            components.month = m - 1
                        }
                        
                        let date = calendar.date(from: components)
                        
                        //获取上月天数
                        var daysOfLastMonth = 0
                        if let d = date, let daysOfLastMonthRange = calendar.range(of: .day, in: .month, for: d){
                            daysOfLastMonth = daysOfLastMonthRange.count
                        }
                        components.day = daysOfLastMonth - startIndex + row
                        
                        cell?.date = calendar.date(from: components)
                    }else {
                        cell?.date = nil
                    }
                    cell?.isThisMonth = false
                    cell?.isToday = false
                }else if row > startIndex - 1 + daysOfThisMonth - 1 {    //为下个月数据
                    if let m = month{
                        if m + 1 > 12{
                            if let y = year{
                                components.year = y + 1
                            }
                            components.month = 1
                        }else{
                            components.month = m + 1
                        }
                        components.day = row - (startIndex - 1) - (daysOfThisMonth - 1)
                        let date = calendar.date(from: components)
                        cell?.date = date
                    }else {
                        cell?.date = nil
                    }
                    cell?.isThisMonth = false
                    cell?.isToday = false
                }else{                                                  //为当月数据
                    components.day = row - (startIndex - 1) + 1
                    let date = calendar.date(from: components)
                    cell?.date = date
                    cell?.isThisMonth = true
                    cell?.isToday = date?.isToday() ?? false
                }
            }
        }else{                  //下个月=================================================================================
            //获取当前选择的上一个月的年月
            components.year = year
            var nextMonth: Int?
            if let m = month{
                if m + 1 > 12{
                    if let y = year{
                        components.year = y + 1
                    }
                    nextMonth = 1
                    components.month = nextMonth
                }else{
                    nextMonth = m + 1
                    components.month = nextMonth
                }
            }
            components.day = 1
            let nextDate = calendar.date(from: components)?.GMT()
            if let nDate = nextDate {
                var startIndex = nDate.weekday() - 1
                if startIndex == 0{
                    startIndex = 6
                }
                
                //获取当月总天数
                var daysOfNextMonth = 0
                if let daysOfNextMonthRange = calendar.range(of: .day, in: .month, for: nDate){
                    daysOfNextMonth = daysOfNextMonthRange.count
                }
                if row < startIndex - 1 {                               //为本月数据
                    if let m = nextMonth{
                        if m - 1 == 0{
                            if let y = year{
                                components.year = y - 1
                            }
                            components.month = 12
                        }else{
                            components.month = m - 1
                        }
                        
                        let date = calendar.date(from: components)
                        
                        //获取本月天数
                        var daysOfThisMonth = 0
                        if let d = date, let daysOfThisMonthRange = calendar.range(of: .day, in: .month, for: d){
                            daysOfThisMonth = daysOfThisMonthRange.count
                        }
                        components.day = daysOfThisMonth - startIndex + row
                        
                        cell?.date = calendar.date(from: components)
                    }else {
                        cell?.date = nil
                    }
                    cell?.isThisMonth = false
                    cell?.isToday = false
                }else if row > startIndex - 1 + daysOfNextMonth - 1 {    //为下下个月数据
                    if let m = nextMonth{
                        if m + 1 > 12{
                            if let y = year{
                                components.year = y + 1
                            }
                            components.month = 1
                        }else{
                            components.month = m + 1
                        }
                        
                        components.day = row - (startIndex - 1) - (daysOfNextMonth - 1)
                        
                        let date = calendar.date(from: components)
                        cell?.date = date
                    }else {
                        cell?.date = nil
                    }
                    cell?.isThisMonth = false
                    cell?.isToday = false
                }else{                                                  //为下个月数据
                    components.day = row - (startIndex - 1) + 1
                    let date = calendar.date(from: components)
                    cell?.date = date
                    cell?.isThisMonth = true
                    cell?.isToday = date?.isToday() ?? false
                }
            }
        }
        
        return cell!
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        //自动选择选择月份的1号
        var components = calendar.dateComponents([.year, .month, .day], from: Date())
        
        let oldOffset = scrollView.contentOffset
        
        if oldOffset.x > scrollView.frame.width * 1.5 {         //滑动到下个月
            var nextMonth: Int?
            if let m = month{
                if m + 1 > 12{
                    if let y = year{
                        components.year = y + 1
                    }
                    nextMonth = 1
                    components.month = nextMonth
                }else{
                    nextMonth = m + 1
                    components.month = nextMonth
                }
            }
            components.day = 1
            let nextDate = calendar.date(from: components)?.GMT()
            selectedDate = nextDate
        }else if oldOffset.x < scrollView.frame.width * 0.5{    //滑动到上个月
            var lastMonth: Int?
            if let m = month{
                if m - 1 < 0{
                    if let y = year{
                        components.year = y - 1
                    }
                    lastMonth = 12
                    components.month = lastMonth
                }else{
                    lastMonth = m - 1
                    components.month = lastMonth
                }
            }
            components.day = 1
            let lastDate = calendar.date(from: components)?.GMT()
            selectedDate = lastDate
        }

        
        //scrollView.contentOffset = CGPoint(x: scrollView.frame.width, y: 0)
        
        if let selDate = selectedDate{
            closure?(selDate)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        //updateData()
    }
    
    func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool {
        return false
    }
    
    //flow layout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width: CGFloat = (frame.width - 6 * 3 - 15 * 2) / 7
        let height: CGFloat = (frame.height - 10 * 2 - 3 * 5) / 6
        return CGSize(width: width, height: height)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 10, left: 15, bottom: 10, right: 15)
    }    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 3
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 3
    }
    
    //delegate
    func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let cell = collectionView.cellForItem(at: indexPath) as? GANCollectionCell else{
            return
        }
        
        selectedDate = cell.date
        if let selDate = selectedDate{
            closure?(selDate)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool {
        return true
    }
}
