//
//  MemberTextField.swift
//  Remind
//
//  Created by dong on 2018/1/4.
//  Copyright © 2018年 ganyi. All rights reserved.
//

import UIKit

enum MemberTimerButtonType {
    case normal
    case disabled
    case timing
}

final class MemberTimerButton: UIButton {
    
    var clickHandler: (() -> Void)?
    
    fileprivate var timer: DispatchSourceTimer?
    
    fileprivate let totalTime: Int = 60
    
    fileprivate var currentTime: Int = 0
    
    var type: MemberTimerButtonType = .normal {
        didSet {
            switch type {
            case .normal:
                isEnabled = true
            case .timing:
                setTitleColor(UIColor.subSubWord, for: .disabled)
                isEnabled = false
            case .disabled:
                let titleColor = UIColor.orangeFont.withAlphaComponent(0.4)
                setTitleColor(titleColor, for: .disabled)
                isEnabled = false
            }
        }
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = UIColor.headerBg
        layer.cornerRadius = 3
        clipsToBounds = true
        setTitle("获取验证码", for: .normal)
        let themeColor = UIColor.orangeFont
        setTitleColor(themeColor, for: .normal)
        titleLabel?.font = UIFont.systemFont(ofSize: 13)
        addTarget(self, action: #selector(click), for: .touchUpInside)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func scheduleTimer(leftTime: Int = 60) {
        currentTime = totalTime - leftTime
        let timer = DispatchSource.makeTimerSource(flags: [], queue: DispatchQueue.main)
        timer.schedule(deadline: .now(), repeating: 1)
        timer.setEventHandler { [weak self] in
            guard let weakSelf = self else {
                return
            }
            
            weakSelf.currentTime += 1
            guard weakSelf.currentTime < weakSelf.totalTime else {
                weakSelf.setTitle("重新发送", for: .normal)
                weakSelf.type = .normal
                weakSelf.timer?.cancel()
                weakSelf.currentTime = 0
                return
            }
            
            let time = weakSelf.totalTime - weakSelf.currentTime
            weakSelf.setTitle("\(time)s后重发", for: .normal)
        }
        if #available(iOS 10.0, *) {
            timer.activate()
        } else {
            timer.resume()
        }
        
        self.timer = timer
        type = .timing
    }
    
    @objc fileprivate func click() {
        clickHandler?()
    }
    
    deinit {
        timer?.cancel()
    }
    
}

final class LoginGetCodeView: UIView {
    
    let codeButton = MemberTimerButton()
    
    init() {
        super.init(frame: CGRect(x: 0, y: 0, width: 80, height: 30))
//        let separateView = UIView()
//        separateView.backgroundColor = UIColor.grayBtn
//        addSubview(separateView)
//        separateView.snp.makeConstraints { (make) in
//            make.leading.equalToSuperview()
//            make.height.equalTo(18)
//            make.width.equalTo(0.5)
//            make.centerY.equalToSuperview()
//        }
        
        codeButton.type = .disabled
        addSubview(codeButton)
        codeButton.snp.makeConstraints { (make) in
            make.left.right.top.bottom.equalToSuperview()
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}

enum MemberTextFieldRightViewType {
    case normal
    case username
    case phone
    case code
    case password
}

class TextField: UITextField {
    
    var range: CountableClosedRange<Int>?
    
    var isValid: Bool {
        guard let range = range, let text = self.text else {
            return true
        }
        
        let textCount = text.count
        if range.lowerBound == 0 {
            return textCount == range.upperBound
        } else {
            return textCount >= range.lowerBound && textCount <= range.upperBound
        }
    }
    
    init() {
        super.init(frame: CGRect.zero)
        addTarget(self, action: #selector(editingChanged), for: .editingChanged)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func rightViewRect(forBounds bounds: CGRect) -> CGRect {
        var rightRect = super.rightViewRect(forBounds: bounds)
//        rightRect = CGRect.init(x: bounds.width - 100, y: 0, width: 100, height: bounds.height)
        return rightRect
        
    }
    
    override func leftViewRect(forBounds bounds: CGRect) -> CGRect {
        var leftRect = super.leftViewRect(forBounds: bounds)
        return leftRect
        
    }
    
    @objc fileprivate func editingChanged(textField: UITextField) {
        if let range = range, let text = textField.text, text.count > range.upperBound {
            let index = text.index(text.startIndex, offsetBy: range.upperBound - 1)
            textField.text = String(text[...index])
        }
    }
    
}

final class MemberTextField: TextField {
    
    fileprivate(set) var loginGetCodeView: LoginGetCodeView?
    
    override init() {
        super.init()
        autocorrectionType = .no
        autocapitalizationType = .none
        delegate = self
    }
    
    fileprivate(set) var type: MemberTextFieldRightViewType = .normal
    
    func setLeftViewType(type: MemberTextFieldRightViewType) {
        switch type {
        case .phone: break
        case .username: break
        case .code: break
        case .password: break
        default:
            break
        }
    }
    
    func setRightViewType(type: MemberTextFieldRightViewType) {
        self.type = type
        switch type {
        case .phone:
            keyboardType = .phonePad
            range = 0...11
        case .username:
            range = 3...30
            keyboardType = .asciiCapable
        case .code:
            keyboardType = .numberPad
            loginGetCodeView = LoginGetCodeView()
            rightView = loginGetCodeView
            rightViewMode = .always
            range = 0...6
        case .password:
            keyboardType = .asciiCapable
            isSecureTextEntry = true
            let secureButton = UIButton()
            secureButton.frame = CGRect(x: 0, y: 0, width: 19, height: 19)
            secureButton.setBackgroundImage(nil, for: .normal)
            let themeColor = UIColor.orangeFont
            secureButton.setBackgroundImage(UIImage.image(color: themeColor), for: .selected)
            secureButton.setImage(UIImage(named: "login_password_secure"), for: .normal)
            secureButton.setImage(UIImage(named: "login_password_visual"), for: .selected)
            secureButton.addTarget(self, action: #selector(secureChange), for: .touchUpInside)
            rightView = secureButton
            rightViewMode = .always
            range = 8...32
        default:
            break
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
//    override func canPerformAction(_ action: Selector, withSender sender: Any?) -> Bool {
//        if (type == .password && action == #selector(UIResponderStandardEditActions.paste(_:))) {
//            return false
//        }
//
//        return super.canPerformAction(action, withSender: sender)
//    }
//
    override func rightViewRect(forBounds bounds: CGRect) -> CGRect {
        var rect = super.rightViewRect(forBounds: bounds)
        guard type != .code else {
            return rect
        }
        
        rect.origin.x -= 15
        return rect
    }
    
    override func clearButtonRect(forBounds bounds: CGRect) -> CGRect {
        var rect = super.clearButtonRect(forBounds: bounds)
        rect.origin.x -= 10
        return rect
    }
    
    override func textRect(forBounds bounds: CGRect) -> CGRect {
        var rect = super.textRect(forBounds: bounds)
        rect.origin.x += 15
        rect.size.width -= 15 * 2
        return rect
    }
    
    override func editingRect(forBounds bounds: CGRect) -> CGRect {
        var rect = super.editingRect(forBounds: bounds)
        rect.origin.x += 15
        rect.size.width -= 15 * 2
        return rect
    }
    
    @objc fileprivate func secureChange(button: UIButton) {
        button.isSelected = !button.isSelected
        isSecureTextEntry = !button.isSelected
        resignFirstResponder()
    }
    
}

extension MemberTextField: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField.returnKeyType == .done {
            textField.resignFirstResponder()
            return false
        }
        
        if textField.returnKeyType == .next {
            return true
        }
        
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        let type = (textField as! MemberTextField).type
        guard string.count > 1 else {
            guard string != "" else {//delete
                return true
            }
            guard let range = self.range else {//设置了最大长度
                return true
            }
            switch type {
            case .username, .password, .phone, .code:
                return (textField.text?.count)! < range.upperBound
            default:
                return true
            }
        }
        //复制格式验证
        switch type {
        case .password:
            let scanner = Scanner(string: string)
            if scanner.scanCharacters(from: CharacterSet.alphanumerics, into: nil) {
                return true
            }
        case .phone, .code:
            let scanner = Scanner(string: string)
            if scanner.scanDecimal(nil) {
                return true
            }
        default:
            return true
        }
        return false
    }
    
}
