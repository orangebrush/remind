//
//  StepVC.swift
//  Remind
//
//  Created by gg on 23/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
let updateStepSetting = Notification.Name(rawValue: "updatestepsetting")
class StepVC: BasedViewController {
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var graphicView: StepGraphicView!
    
    @IBOutlet weak var stepLabel: UILabel!
    @IBOutlet weak var stepUnitLabel: UILabel!
    @IBOutlet weak var distanceLabel: UILabel!
    @IBOutlet weak var highestLabel: UILabel!
    @IBOutlet weak var segment: UISegmentedControl!
    
    @IBOutlet weak var historyBarButtonItem: UIBarButtonItem!
    @IBOutlet weak var bottomConstraint: NSLayoutConstraint!
    
    ///是否打开目标设置
    fileprivate var isTargetSetOpen = false
    
    ///步数设置对象
    var stepsSetting = StepsSetting()
    
    var targetStep = 8000{
        didSet{
            self.getDetailModelFrom(withBeforeDay: 7)
        }
    }
    
    ///默认按周统计
    fileprivate var currentDisplayMode: DisplayMode = .day7
    
    ///需绘制的数据模型列表
    fileprivate var stepsDetailModel = StepsDetailModel(){
        didSet{
            
            graphicView.stepsDetailModel = stepsDetailModel
        }
    }
    
    var isLocked = false
    var selector: GANSelector?
    
    
    ///定时器
    private var timer: Timer?
    
    //MARK:- init------------------------------------------------------------------------
    override func viewDidLoad() {
        super.viewDidLoad()
        
        config()
        createContents()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        //如果已打开 则关闭    t
        if isTargetSetOpen {
        
        }
        
        let item = BarButtonItem(textStr: backButtonTitle, imageName: "navbar_icon_back", tSelector: #selector(backToPrevious))
        self.navigationItem.leftBarButtonItems = customItemsPosition(items: [item], position: .left)
        
        bottomConstraint.constant = 20 + (isIphoneX ? 34 : 0)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
      
        dismissSelector()
        
        timer?.invalidate()
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self, name: updateStepSetting, object: nil)
    }
    
    //MARK:- 获取数据
    @objc private func getStepSetting(){
        DataManager.share().getTargetStep { (codeResult, message, stepsSetting) in
            self.stepsSetting = stepsSetting
            self.targetStep = stepsSetting.targetStep
        }
    }

    
    private func config(){
        view.backgroundColor = .white
        
        contentView.layer.cornerRadius = .cornerRadius
        
        stepLabel.text = "..."
        stepLabel.font = UIFont(withNormalFontSize: 34)
        stepLabel.textColor = UIColor(colorHex: 0x333333)
        
        distanceLabel.text = "..."
        distanceLabel.font = UIFont(withNormalFontSize: 12)
        distanceLabel.textColor = UIColor(colorHex: 0x999999)
        
        highestLabel.text = "..."
        highestLabel.font = UIFont(withNormalFontSize: 13)
        highestLabel.textColor = UIColor(colorHex: 0x333333)
        highestLabel.backgroundColor = UIColor(colorHex: 0xfff2e5)
        
        highestLabel.layer.cornerRadius = 4
        highestLabel.clipsToBounds = true
        
        stepUnitLabel.font = UIFont(withNormalFontSize: 10)
        stepUnitLabel.textColor = UIColor(colorHex: 0x333333)
        
        historyBarButtonItem.imageInsets = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: -20)
        historyBarButtonItem.tintColor = .white
        
        NotificationCenter.default.addObserver(self, selector: #selector(getStepSetting), name: updateStepSetting, object: nil)
        
        getStepSetting()
    }
    
    private func createContents(){
        if timer == nil {
            timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateRealStepAndDistanceM), userInfo: nil, repeats: true)
        }
    }
    
    //MARK:- navigationBarItem 点击事件(设置目标步数)
    @IBAction func navigationItemCLick(_ sender: UIBarButtonItem){
        edit(withSelectorType: .targetStep, withDefultValue: targetStep)
    }
    
    //MARK:- 切换显示
    @IBAction func segmentedValueChange(_ sender: UISegmentedControl) {
        let index = sender.selectedSegmentIndex
        let day: Int
        switch index {
        case 0:
            day = 7
        case 1:
            day = 30
        default:
            day = 90
        }
        
        getDetailModelFrom(withBeforeDay: day)
    }
    
    //MARK:- 获取最近天数据
    private func getDetailModelFrom(withBeforeDay beforeDay: Int){
        
        let endDate = Date()
        let beginDate = endDate.offset(with: -beforeDay)
        
        //锁定切换
        segment.isEnabled = false
        
        //从苹果健康获取数据
        StepManager.share().getStepsListAndDistanceMList(byLastDays: beforeDay) { (codeResult, stepModelList) in
            //解除切换锁定
            self.segment.isEnabled = true
            
            guard codeResult == .success else{
                self.notif(withTitle: "需开启健康数据")
                return
            }
            
            var tempList = stepModelList
            if !tempList.isEmpty{
                //移除明天的数据（获取的时候从明天开始计算的）
                //tempList.removeFirst()
            }
            
            //绘制图形
            self.graphicView.dateRange = beforeDay
            self.graphicView.targetStep = self.targetStep
            self.graphicView.stepsModelList = tempList
            
            //展示最高步数
            let highest = tempList.max(by: { (element0, element1) -> Bool in
                return element0.1 < element1.1
            })
            if let aHighest = highest{
                self.highestLabel.text = "最高记录\(aHighest.1)步， " + aHighest.0.formatString(with: "yyy年M月d日")
            }
        }
        
//        DataManager.share().getStepsDetailLogList(withBeginDate: beginDate, withEndDate: endDate) { (codeResult, message, stepsDetailModel) in
//            guard codeResult == .success else{
//                return
//            }
//            
//            self.graphicView.dateRange = beforeDay
//            self.graphicView.stepsDetailModel = stepsDetailModel
//            
//            self.highestLabel.text = "最高记录\(stepsDetailModel.highestStep.step)步， " + stepsDetailModel.highestStep.date.formatString(with: "yyy年M月d日")
//        }
    }
    
    //MARK:- 更新步数与距离
    @objc func updateRealStepAndDistanceM(){
        StepManager.share().getStepsAndDistanceM { (codeResult, step, distanceM) in
            guard codeResult == .success else{
                return
            }
            self.stepLabel.text = "\(step)"
            let mileStr = String(format: "%.2f", CGFloat(distanceM) / 1000)
            self.distanceLabel.text = "距离" + mileStr + "公里"
        }
    }
}
