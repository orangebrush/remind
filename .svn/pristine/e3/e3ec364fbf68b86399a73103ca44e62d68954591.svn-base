//
//  MemberAlertView.swift
//  Remind
//
//  Created by dong on 2018/1/4.
//  Copyright © 2018年 ganyi. All rights reserved.
//

import UIKit

enum MemberAlertViewActionType {
    case cancel
    case confirm
}

fileprivate let viewWidth = 300

final class MemberAlertView: UIView {
    
    fileprivate lazy var cancelButton: UIButton = {
        let button = UIButton()
        button.setBackgroundImage(UIImage.image(color: .white), for: .normal)
        button.setBackgroundImage(UIImage.image(color: UIColor.grayBtn), for: .highlighted)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16)
        button.layer.borderWidth = 0.5
        button.layer.borderColor = UIColor.grayBtn.cgColor
        button.layer.cornerRadius = 3
        button.setTitleColor(UIColor.word, for: .normal)
        button.addTarget(self, action: #selector(cancel), for: .touchUpInside)
        return button
    }()
    
    fileprivate lazy var confirmButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = .white
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16)
        button.clipsToBounds = true
        let bgColor = UIColor.orangeFont
        button.setBackgroundImage(UIImage.image(color: bgColor), for: .normal)
        button.layer.cornerRadius = 3
        button.setTitleColor(.white, for: .normal)
        button.addTarget(self, action: #selector(confirm), for: .touchUpInside)
        return button
    }()
    
    fileprivate let messageLabel = UILabel()
    
    fileprivate var title: String?
    
    fileprivate var action: (() -> Void)?
    
    fileprivate var title2: String?
    
    fileprivate var action2: (() -> Void)?
    
    init(title: String? = nil, message: String) {
        super.init(frame: CGRect.zero)
        backgroundColor = .white
        layer.cornerRadius = 6
        
        var titleLabel: UILabel?
        if let title = title {
            titleLabel = UILabel()
            titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .semibold)
            titleLabel?.textColor = .black
            titleLabel?.text = title
            titleLabel?.textAlignment = .center
            addSubview(titleLabel!)
            titleLabel?.snp.makeConstraints { (make) in
                make.top.equalToSuperview().offset(27)
                make.leading.trailing.equalToSuperview().inset(25)
            }
        }
        
        messageLabel.font = UIFont.systemFont(ofSize: 15)
        messageLabel.textColor = UIColor.word
        messageLabel.numberOfLines = 0
        addSubview(messageLabel)
        messageLabel.snp.makeConstraints { (make) in
            if let titleLabel = titleLabel {
                make.top.equalTo(titleLabel.snp.bottom).offset(20)
            } else {
                make.top.equalToSuperview().offset(27)
            }
            make.leading.trailing.equalToSuperview().inset(25)
        }
        
        let size = CGSize(width: viewWidth - 50, height: 0)
        let titleHeight = (message as NSString).boundingRect(with: size, options: .usesLineFragmentOrigin, attributes: [NSAttributedStringKey.font: messageLabel.font], context: nil).height
        if titleHeight > messageLabel.font.lineHeight {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.lineSpacing = 4
            let attributedString = NSAttributedString(string: message, attributes: [NSAttributedStringKey.paragraphStyle: paragraphStyle])
            messageLabel.attributedText = attributedString
        } else {
            messageLabel.textAlignment = .center
            messageLabel.text = message
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func show(window: UIWindow) {
        if title == nil {
            confirmButton.setTitle(title2, for: .normal)
            addSubview(confirmButton)
            confirmButton.snp.makeConstraints { (make) in
                make.leading.trailing.equalTo(messageLabel)
                make.top.equalTo(messageLabel.snp.bottom).offset(25)
                make.height.equalTo(38)
                make.bottom.equalToSuperview().inset(25)
            }
        } else {
            cancelButton.setTitle(title, for: .normal)
            addSubview(cancelButton)
            cancelButton.snp.makeConstraints { (make) in
                make.leading.equalTo(messageLabel)
                make.top.equalTo(messageLabel.snp.bottom).offset(25)
                make.height.equalTo(38)
                make.bottom.equalToSuperview().inset(25)
            }
            
            confirmButton.setTitle(title2, for: .normal)
            addSubview(confirmButton)
            confirmButton.snp.makeConstraints { (make) in
                make.centerY.equalTo(cancelButton)
                make.trailing.equalTo(messageLabel)
                make.width.height.equalTo(cancelButton)
                make.leading.equalTo(cancelButton.snp.trailing).offset(14)
            }
        }
        
        let maskView = UIView(frame: UIScreen.main.bounds)
        maskView.backgroundColor = .clear
        maskView.addSubview(self)
        snp.makeConstraints { (make) in
            make.width.equalTo(viewWidth)
            make.center.equalToSuperview()
        }
        updateConstraintsIfNeeded()
        
        window.addSubview(maskView)
        UIView.animate(withDuration: 0.3) {
            maskView.backgroundColor = UIColor(white: 0, alpha: 0.5)
        }
    }
    
    func addAction(title: String, type: MemberAlertViewActionType = .confirm, _ action: (() -> Void)? = nil) {
        switch type {
        case .confirm:
            self.title2 = title
            self.action2 = action
        case .cancel:
            self.title = title
            self.action = action
        }
    }
    
    @objc fileprivate func cancel() {
        action?()
        dismiss()
    }
    
    @objc fileprivate func confirm() {
        if title2 == nil {
            action?()
        } else {
            action2?()
        }
        dismiss()
    }
    
    @objc fileprivate func dismiss() {
        superview?.removeFromSuperview()
        removeFromSuperview()
    }
    
}
