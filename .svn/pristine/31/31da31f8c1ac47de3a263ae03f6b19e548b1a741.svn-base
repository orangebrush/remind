//
//  EventBeginningCell.swift
//  Remind
//
//  Created by gg on 13/12/2017.
//  Copyright © 2017 ganyi. All rights reserved.
//

import Foundation
class EventBeginningCell: UICollectionViewCell {
    
    @IBOutlet weak var label: UILabel!
    @IBOutlet weak var imageView: UIImageView!
    
    
    var tuple: (FrequencyCycle, Int)?{
        didSet{
            guard let t = tuple else {
                return
            }
            let text: String
            switch t.0 {
            case .none:
                text = "无"
            case .minute:
                text = "\(t.1)分钟"
            case .hour:
                text = "\(t.1)小时"
            case .day:
                text = "\(t.1)天"
            case .week:
                text = "\(t.1)个星期"
            default:
                text = "\(t.1)个月"
            }
            label.text = text
        }
    }
    
    override var isSelected: Bool{
        didSet{
            backgroundColor = isSelected ? .white : .white
            if tuple?.0 == .none {
                imageView.isHidden = true
            }else{                
                imageView.isHidden = !isSelected
            }
        }
    }
    
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
        
        label.textColor = .word
        label.font = .normal
        
        backgroundColor = .white
        imageView.image = #imageLiteral(resourceName: "select")
        imageView.isHidden = true
//        layer.cornerRadius = .cornerRadius
    }
    
    override func draw(_ rect: CGRect) {
        super.draw(rect)
    }
}



class EventBeginningCustomCell: UICollectionViewCell {
    var containerView = UIView()
    
    var topRadiusView = UIView()
    
    var bottomRadiusView = UIView()
    
    
    var label: UILabel = UILabel()
    var imageView: UIImageView  = UIImageView()
    var lineView: UIView = UIView()
    
    
    
    var closure: ((String)->())?
    
    
    var tuple: (FrequencyCycle, Int)?{
        didSet{
            guard let t = tuple else {
                return
            }
            let text: String
            switch t.0 {
            case .none:
                text = "无"
            case .minute:
                text = "\(t.1)分钟"
            case .hour:
                text = "\(t.1)小时"
            case .day:
                text = "\(t.1)天"
            case .week:
                text = "\(t.1)个星期"
            default:
                text = "\(t.1)个月"
            }
            label.text = text
        }
    }
    
    
    override var isSelected: Bool{
        didSet{
//            if tuple?.0 == .none {
//                imageView.isHidden = true
//            }else{
//                imageView.isHidden = !isSelected
//            }
        }
    }
    
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.backgroundColor = UIColor.clear
        self.contentView.backgroundColor = UIColor.clear
        self.clipsToBounds = true
        let radiusBounds = CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH - 2 * .edge10, height: 48)
        contentView.addSubview(topRadiusView)
        topRadiusView.snp.makeConstraints { (make) in
            make.left.equalTo(10)
            make.right.equalTo(-10)
            make.top.bottom.equalToSuperview()
        }
        let corners: UIRectCorner = [UIRectCorner.topLeft, UIRectCorner.topRight]
        let path = UIBezierPath(roundedRect: radiusBounds, byRoundingCorners: corners, cornerRadii: CGSize(width: 6, height: 6))
        let maskLayer = CAShapeLayer()
        maskLayer.path = path.cgPath
        maskLayer.frame = radiusBounds
        topRadiusView.layer.mask = maskLayer
        
        
        contentView.addSubview(bottomRadiusView)
        bottomRadiusView.snp.makeConstraints { (make) in
            make.edges.equalTo(topRadiusView)
        }
        let corners1: UIRectCorner = [UIRectCorner.bottomLeft, UIRectCorner.bottomRight]
        let path1 = UIBezierPath(roundedRect: radiusBounds, byRoundingCorners: corners1, cornerRadii: CGSize(width: 6, height: 6))
        let maskLayer1 = CAShapeLayer()
        maskLayer1.path = path1.cgPath
        maskLayer1.frame = radiusBounds
        bottomRadiusView.layer.mask = maskLayer1
        
        
        
        contentView.addSubview(containerView)
        
        containerView.snp.makeConstraints { (make) in
            //            make.left.equalTo(10)
            //            make.right.equalTo(-10)
            //            make.top.bottom.equalToSuperview()
            
            make.edges.equalTo(topRadiusView)
        }
        
        
        containerView.addSubview(label)
        label.font = UIFont.normal
        label.textColor = UIColor.word
        label.snp.makeConstraints { (make) in
            make.top.bottom.equalToSuperview()
            make.left.equalTo(cellSpace)
            make.width.equalTo(200)
        }
        
        
        containerView.addSubview(imageView)
        imageView.image = UIImage.init(named: "list_checked")
        imageView.snp.makeConstraints { (make) in
            make.right.equalToSuperview().offset(-cellSpace)
            make.width.height.equalTo(20)
            make.centerY.equalToSuperview()
        }
        
        containerView.addSubview(lineView)
        lineView.backgroundColor = UIColor.separator
        lineView.snp.makeConstraints { (make) in
            make.bottom.equalToSuperview()
            make.right.equalToSuperview()
            make.height.equalTo(kLineHeight)
            make.left.equalTo(cellSpace)
        }
        
    }
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
//        imageView.isHidden = true
    }
    func setData(_ radiusType: cornerRadiusType = .none , isShowsSeparatorLine: Bool = true) {
        if radiusType == .top {
            containerView.backgroundColor = .clear
            bottomRadiusView.backgroundColor = .clear
            topRadiusView.backgroundColor = .white
        }else if radiusType == .bottom {
            containerView.backgroundColor = .clear
            topRadiusView.backgroundColor = .clear
            bottomRadiusView.backgroundColor = .white
        }else if radiusType == .none  {
            bottomRadiusView.backgroundColor = .clear
            topRadiusView.backgroundColor = .clear
            containerView.backgroundColor = .white
            containerView.layer.cornerRadius = 0
            containerView.clipsToBounds = true
        }else if radiusType == .all  {
            bottomRadiusView.backgroundColor = .clear
            topRadiusView.backgroundColor = .clear
            containerView.backgroundColor = .white
            containerView.layer.cornerRadius = 6
            containerView.clipsToBounds = true
        }
        if isShowsSeparatorLine {
            lineView.isHidden = false
        }else {
            lineView.isHidden = true
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
    }
    
    override func draw(_ rect: CGRect) {
        super.draw(rect)
        
    }
}
